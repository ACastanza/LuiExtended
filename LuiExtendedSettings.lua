local strformat = zo_strformat

-- Create Settings Menu
function LUIE_CreateSettings()
    local LAM2 = LibStub("LibAddonMenu-2.0")
    if LAM2 == nil then return end

    local L = LUIE.GetLocale()

    -- Helper local flag
    local l_BuffsMovingEnabled = false

    local FontsList = {}
    for f in pairs( LUIE.Fonts ) do
        table.insert(FontsList, f)
    end

    local FontsListCombatInfo = {}
    for key, _ in pairs( LUIE.CombatInfo.FontFamilies ) do
        table.insert( FontsListCombatInfo, key )
    end

    local StatusbarTexturesList = {}
    for key, _ in pairs( LUIE.StatusbarTextures ) do
        table.insert( StatusbarTexturesList, key )
    end

    local styleOptions = {"normal", "outline", "shadow", "soft-shadow-thick", "soft-shadow-thin", "thick-outline"}
    local nameDisplayOptions = {"@UserID", "Character Name", "Character Name @UserID"}
    local nameDisplayOptionsKeys = { ["@UserID"] = 1, ["Character Name"] = 2, ["Character Name @UserID"] = 3 }

    local chatnameDisplayOptions = {"@UserID", "Character Name", "Character Name @UserID"}
    local chatnameDisplayOptionsKeys = { ["@UserID"] = 1, ["Character Name"] = 2, ["Character Name @UserID"] = 3 }

    local currencyBracketOptions = {"[]", "()", "Hyphen", "No Brackets"}
    local currencyBracketOptionsKeys = { ["[]"] = 1, ["()"] = 2, ["Hyphen"] =3, ["No Brackets"] = 4 }

    local itemBracketOptions = {"[]", "()", "Hyphen", "No Brackets"}
    local itemBracketOptionsKeys = { ["[]"] = 1, ["()"] = 2, ["Hyphen"] =3, ["No Brackets"] = 4 }

    local experienceDisplayOptions = {"Value", "Percentage", "Both"}
    local experienceDisplayOptionsKeys = { ["Value"] = 1, ["Percentage"] = 2, ["Both"] = 3 }

    local guildrankDisplayOptions = { "Self Only", "Self + All w/ Permissions", "Display All Rank Changes"}
    local guildrankDisplayOptionsKeys = { ["Self Only"] = 1, ["Self + All w/ Permissions"] = 2, ["Display All Rank Changes"] = 3 }

    local formatOptions = {
        "Nothing",
        "Current",
        "Current + Shield",
        "Max",
        "Percentage%",
        "Current / Max",
        "Current + Shield / Max",
        "Current / Max (Percentage%)",
        "Current + Shield / Max (Percentage%)",
        "Current (Percentage%)",
        "Current + Shield (Percentage%)"
    }
    local rotationOptions = { "Horizontal", "Vertical" }
    local rotationOptionsKeys = { ["Horizontal"] = 1, ["Vertical"] = 2 }
    local hAlignOptions = { "Left", "Centered", "Right" }
    local vAlignOptions = { "Top", "Middle", "Bottom" }

    local panelData = {
        type = "panel",
        name = LUIE.name,
        displayName = zo_strformat(LUIE.name, GetString(SI_GAME_MENU_SETTINGS)),
        author = LUIE.author,
        version = LUIE.version,
        website = "http://www.esoui.com/downloads/info818-LuiExtended.html",
        slashCommand = "/luiset",
        registerForRefresh = true,
        registerForDefaults = true,
    }

    local panelDataUnitFrames = {
        type = "panel",
        name = zo_strformat("<<1>> - <<2>>", LUIE.name, GetString(SI_LUIE_LAM_UNITFRAMES)),
        displayName = zo_strformat(LUIE.name, GetString(SI_LUIE_LAM_UNITFRAMES), GetString(SI_GAME_MENU_SETTINGS)),
        author = LUIE.author,
        version = LUIE.version,
        website = "http://www.esoui.com/downloads/info818-LuiExtended.html",
        slashCommand = "/luiframes",
        registerForRefresh = true,
        registerForDefaults = true,
    }

    local optionsData = {}
    local optionsDataUnitFrames = {}

    -- ReloadUI Button
    optionsData[#optionsData + 1] = {
        type = "button",
        name = "Reload UI",
        tooltip = GetString(SI_LUIE_LAM_RELOADUI),
        func = function() ReloadUI("ingame") end,
        width = "full",
    }

    -- Info Panel Options
    optionsData[#optionsData + 1] = {
        type = "submenu",
        name = GetString(SI_LUIE_LAM_INFOPANEL_HEADER),
        reference = "Info_Panel_Options_Submenu",
        controls = {
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWPANEL),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_SHOWPANEL_TOOLTIP),
                getFunc = function() return LUIE.SV.InfoPanel_Enabled end,
                setFunc = function(value) LUIE.SV.InfoPanel_Enabled = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.D.InfoPanel_Enabled,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_UNLOCKPANEL),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_UNLOCKPANEL_TOOLTIP),
                getFunc = function() return LUIE.InfoPanel.panelUnlocked end,
                setFunc = LUIE.InfoPanel.SetMovingState,
                width = "half",
                default = false,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
                resetFunc = LUIE.InfoPanel.ResetPosition,
            },
            {
                type = "button",
                name = GetString(SI_LUIE_LAM_INFOPANEL_RESETPOSITION),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_RESETPOSITION_TOOLTIP),
                func = LUIE.InfoPanel.ResetPosition,
                width = "half",
            },
            {
                type = "slider",
                name = GetString(SI_LUIE_LAM_INFOPANEL_PANELSCALE),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_PANELSCALE_TOOLTIP),
                min = 100, max = 300, step = 10,
                getFunc = function() return LUIE.InfoPanel.SV.panelScale end,
                setFunc = function(value) LUIE.InfoPanel.SV.panelScale = value LUIE.InfoPanel.SetScale() end,
                width = "full",
                default = 100,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "header",
                name = GetString(SI_LUIE_LAM_INFOPANEL_ELEMENTS_HEADER),
                width = "full",
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWLATENCY),
                getFunc = function() return not LUIE.InfoPanel.SV.HideLatency end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideLatency = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWCLOCK),
                getFunc = function() return not LUIE.InfoPanel.SV.HideClock end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideClock = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWFPS),
                getFunc = function() return not LUIE.InfoPanel.SV.HideFPS end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideFPS = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWMOUNTTIMER),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_SHOWMOUNTTIMER_TOOLTIP),
                getFunc = function() return not LUIE.InfoPanel.SV.HideMountFeed end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideMountFeed = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWARMORDURABILITY),
                getFunc = function() return not LUIE.InfoPanel.SV.HideArmour end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideArmour = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWEAPONCHARGES),
                getFunc = function() return not LUIE.InfoPanel.SV.HideWeapons end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideWeapons = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWBAGSPACE),
                getFunc = function() return not LUIE.InfoPanel.SV.HideBags end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideBags = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWSOULGEMS),
                getFunc = function() return not LUIE.InfoPanel.SV.HideGems end,
                setFunc = function(value) LUIE.InfoPanel.SV.HideGems = not value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = true,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_SHOWICTROPHYCOUNT),
                getFunc = function() return LUIE.InfoPanel.SV.ShowTrophy end,
                setFunc = function(value) LUIE.InfoPanel.SV.ShowTrophy = value LUIE.InfoPanel.RearrangePanel() end,
                width = "full",
                default = false,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
            {
                type = "header",
                name = GetString(SI_PLAYER_MENU_MISC),
                width = "full",
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_INFOPANEL_DISABLECOLORSRO),
                tooltip = GetString(SI_LUIE_LAM_INFOPANEL_DISABLECOLORSRO_TOOLTIP),
                getFunc = function() return LUIE.InfoPanel.SV.DisableInfoColours end,
                setFunc = function(value) LUIE.InfoPanel.SV.DisableInfoColours = value end,
                width = "full",
                default = false,
                disabled = function() return not LUIE.SV.InfoPanel_Enabled end,
            },
        },
    }
    -- Combat Info Options
    optionsData[#optionsData + 1] = {
        type = "submenu",
        name = GetString(SI_LUIE_LAM_COMBATINFO_HEADER),
        reference = "Combat_Info_Options_Submenu",
        controls = {
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_COMBATINFO_SHOWCOMBATINFO),
                tooltip = GetString(SI_LUIE_LAM_COMBATINFO_SHOWCOMBATINFO_TOOLTIP),
                getFunc = function() return LUIE.SV.CombatInfo_Enabled end,
                setFunc = function(value) LUIE.SV.CombatInfo_Enabled = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.D.CombatInfo_Enabled,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_COMBATINFO_SHOWCOOLDOWNS),
                tooltip = GetString(SI_LUIE_LAM_COMBATINFO_SHOWCOOLDOWNS_TOOLTIP),
                getFunc = function() return LUIE.CombatInfo.SV.CoolDown end,
                setFunc = function(value) LUIE.CombatInfo.SV.CoolDown = value end,
                width = "full",
                default = LUIE.CombatInfo.D.CoolDown,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "header",
                name = GetString(SI_LUIE_LAM_COMBATINFO_ULTIMATETRACKING_HEADER),
                width = "full",
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_COMBATINFO_SHOWULTIMATEVALUE),
                tooltip = GetString(SI_LUIE_LAM_COMBATINFO_SHOWULTIMATEVALUE_TOOLTIP),
                getFunc = function() return LUIE.CombatInfo.SV.UltimateEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.UltimateEnabled = value LUIE.CombatInfo.OnSlotsFullUpdate(nil) end,
                width = "full",
                default = LUIE.CombatInfo.D.UltimateEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_COMBATINFO_HIDEPERCENTWHENFULL),
                tooltip = GetString(SI_LUIE_LAM_COMBATINFO_HIDEPERCENTWHENFULL_TOOLTIP),
                getFunc = function() return LUIE.CombatInfo.SV.UltimateHideFull end,
                setFunc = function(value) LUIE.CombatInfo.SV.UltimateHideFull = value end,
                width = "full",
                default = LUIE.CombatInfo.D.UltimateHideFull,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.UltimateEnabled ) end,
            },
            {
                type = "checkbox",
                name = GetString(SI_LUIE_LAM_COMBATINFO_ENABLEULTIREADYALERT),
                tooltip = GetString(SI_LUIE_LAM_COMBATINFO_ENABLEULTIREADYALERT_TOOLTIP),
                getFunc = function() return LUIE.CombatInfo.SV.UltimateAlert end,
                setFunc = function(value) LUIE.CombatInfo.SV.UltimateAlert = value end,
                width = "full",
                default = LUIE.CombatInfo.D.UltimateAlert,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Show Ultimate Generation texture",
                tooltip = "Display special texture under Ultimate skill button when in-combat ultimate generation is detected.",
                getFunc = function() return LUIE.CombatInfo.SV.UltimateGeneration end,
                setFunc = function(value) LUIE.CombatInfo.SV.UltimateGeneration = value end,
                width = "full",
                default = LUIE.CombatInfo.D.UltimateGeneration,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "header",
                name = "Cloud-type areas text options",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Unlock Areas",
                tooltip = "Allow mouse dragging for different floating text areas.",
                getFunc = function() return LUIE.CombatInfo.panelUnlocked end,
                setFunc = LUIE.CombatInfo.SetMovingState,
                width = "half",
                default = false,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
                resetFunc = LUIE.CombatInfo.ResetPosition,
            },
            {
                type = "button",
                name = "Reset position",
                tooltip = "This will reset position of Info Panel into screen top right corner.",
                func = LUIE.CombatInfo.ResetPosition,
                width = "half",
            },
            {
                type = "checkbox",
                name = "Enable Cloud-type areas",
                getFunc = function() return LUIE.CombatInfo.SV.CloudTextEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.CloudTextEnabled = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.CombatInfo.D.CloudTextEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "slider",
                name = "Large Font Size",
                tooltip = "Large font is used to for critical damage hits and experience gain labels.",
                min = 20, max = 50, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontCloudSizeLarge end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontCloudSizeLarge = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontCloudSizeLarge,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CloudTextEnabled) end,
            },
            {
                type = "slider",
                name = "Medium Font Size",
                tooltip = "Medium font is used to for normal damage hits, alliance points gain and drain/energize labels.",
                min = 14, max = 40, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontCloudSizeMedium end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontCloudSizeMedium = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontCloudSizeMedium,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CloudTextEnabled) end,
            },
            {
                type = "slider",
                name = "Small Font Size",
                tooltip = "Small font is used to for DOT damage hits, all incoming damage and all healing done and received labels.",
                min = 12, max = 30, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontCloudSizeSmall end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontCloudSizeSmall = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontCloudSizeSmall,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CloudTextEnabled) end,
            },
            {
                type = "checkbox",
                name = "Show label icons",
                tooltip = "Display abilities icons (if available) next to each text label.",
                getFunc = function() return LUIE.CombatInfo.SV.ShowIconsCloud end,
                setFunc = function(value) LUIE.CombatInfo.SV.ShowIconsCloud = value end,
                width = "full",
                default = LUIE.CombatInfo.D.ShowIconsCloud,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CloudTextEnabled) end,
            },
            {
                type = "header",
                name = "Scrolling-type areas text options",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Enable Scrolling-type areas",
                getFunc = function() return LUIE.CombatInfo.SV.ScrollTextEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.ScrollTextEnabled = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.CombatInfo.D.ScrollTextEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "slider",
                name = "Large Font Size",
                tooltip = "Large font is used to for critical damage hits and experience gain labels.",
                min = 20, max = 50, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontScrollSizeLarge end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontScrollSizeLarge = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontScrollSizeLarge,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ScrollTextEnabled) end,
            },
            {
                type = "slider",
                name = "Medium Font Size",
                tooltip = "Medium font is used to for normal damage hits, alliance points gain and drain/energize labels.",
                min = 14, max = 40, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontScrollSizeMedium end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontScrollSizeMedium = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontScrollSizeMedium,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ScrollTextEnabled) end,
            },
            {
                type = "slider",
                name = "Small Font Size",
                tooltip = "Small font is used to for DOT damage hits, all incoming damage and all healing done and received labels.",
                min = 12, max = 30, step = 2,
                getFunc = function() return LUIE.CombatInfo.SV.FontScrollSizeSmall end,
                setFunc = function(value) LUIE.CombatInfo.SV.FontScrollSizeSmall = value LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                default = LUIE.CombatInfo.D.FontScrollSizeSmall,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ScrollTextEnabled) end,
            },
            {
                type = "checkbox",
                name = "Show label icons",
                tooltip = "Display abilities icons (if available) next to each text label.",
                getFunc = function() return LUIE.CombatInfo.SV.ShowIconsScroll end,
                setFunc = function(value) LUIE.CombatInfo.SV.ShowIconsScroll = value end,
                width = "full",
                default = LUIE.CombatInfo.D.ShowIconsScroll,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ScrollTextEnabled) end,
            },
            {
                type = "checkbox",
                name = "Allow drop of some queued events",
                tooltip = "If the event queue is getting too long during intensive fight allow to drop of some non too important events.",
                getFunc = function() return LUIE.CombatInfo.SV.PurgeExpiredScroll end,
                setFunc = function(value) LUIE.CombatInfo.SV.PurgeExpiredScroll = value end,
                width = "full",
                default = LUIE.CombatInfo.D.PurgeExpiredScroll,
                disabled = function() return not (LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ScrollTextEnabled) end,
            },
            {
                type = "header",
                name = "Common options",
                width = "full",
            },
            {
                type = "dropdown",
                name = "Font family for labels",
                tooltip = "Font family to use on floating text labels.",
                choices = FontsListCombatInfo,
                getFunc = function() return LUIE.CombatInfo.SV.FontFamily end,
                setFunc = function(var) LUIE.CombatInfo.SV.FontFamily = var LUIE.CombatInfo.PrepareFonts(true) end,
                width = "full",
                sort = "name-up",
                default = LUIE.CombatInfo.D.FontFamily,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Show combat related text",
                tooltip = "Display floating numbers for various combat related events (damage, healing, etc).",
                getFunc = function() return LUIE.CombatInfo.SV.CombatEventsEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.CombatEventsEnabled = value LUIE.CombatInfo.RegisterCombatEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.CombatEventsEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Throttle values",
                tooltip = "Accumulates multiple hits into one label.",
                getFunc = function() return LUIE.CombatInfo.SV.ThrottleEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.ThrottleEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.ThrottleEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Incoming Damage-Over-Time",
                tooltip = "Display floating numbers for incoming DOTs events",
                getFunc = function() return LUIE.CombatInfo.SV.DotsInEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.DotsInEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.DotsInEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Outging Damage-Over-Time",
                tooltip = "Display floating numbers for outging DOTs events",
                getFunc = function() return LUIE.CombatInfo.SV.DotsOutEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.DotsOutEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.DotsOutEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Incoming Healing",
                tooltip = "Display floating numbers for incoming healing events",
                getFunc = function() return LUIE.CombatInfo.SV.HealingInEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.HealingInEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.HealingInEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Outging Healing",
                tooltip = "Display floating numbers for outgoing healing events",
                getFunc = function() return LUIE.CombatInfo.SV.HealingOutEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.HealingOutEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.HealingOutEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Enable damage-type dependent colours",
                tooltip = "Make colours of labels for outgoing damage dependent on damage type.",
                getFunc = function() return LUIE.CombatInfo.SV.DamageColoured end,
                setFunc = function(value) LUIE.CombatInfo.SV.DamageColoured = value end,
                width = "full",
                default = LUIE.CombatInfo.D.DamageColoured,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show target crowd-control events",
                tooltip = "Display floating when target is stunned or interrupted.",
                getFunc = function() return LUIE.CombatInfo.SV.CombatCCEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.CombatCCEnabled = value LUIE.CombatInfo.RegisterCombatEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.CombatCCEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Attributes Drain text",
                tooltip = "Display player magicka/stamina loss",
                getFunc = function() return LUIE.CombatInfo.SV.DrainEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.DrainEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.DrainEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show Attributes Energized text",
                tooltip = "Display player magicka/stamina return",
                getFunc = function() return LUIE.CombatInfo.SV.EnergizeEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.EnergizeEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.EnergizeEnabled,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatEventsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Show experience gain text",
                tooltip = "Display floating numbers of gained experience.",
                getFunc = function() return LUIE.CombatInfo.SV.ExperienceEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.ExperienceEnabled = value LUIE.CombatInfo.RegisterXPEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.ExperienceEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Show alliance points gain text",
                tooltip = "Display floating numbers of gained alliance points.",
                getFunc = function() return LUIE.CombatInfo.SV.AllianceEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.AllianceEnabled = value LUIE.CombatInfo.RegisterAPEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.AllianceEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Show TelVar stones update text",
                tooltip = "Display floating numbers of gained alliance points.",
                getFunc = function() return LUIE.CombatInfo.SV.TelVarEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.TelVarEnabled = value LUIE.CombatInfo.RegisterTSEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.TelVarEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "header",
                name = "Alerts options",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Enable Active Combat Tips alerts",
                tooltip = "Display alerts to Block/Dodge/Exploit combat tips.",
                warning = "For this functionality to work properly, you also have go to Settings->Interface and select 'Always show' for 'Active Combat Tips' option.",
                getFunc = function() return LUIE.CombatInfo.SV.CombatTipsEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.CombatTipsEnabled = value LUIE.CombatInfo.RegisterCombatTipEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.CombatTipsEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Hide ingame tips",
                tooltip = "Hide default Active Combat Tips window.",
                getFunc = function() return LUIE.CombatInfo.SV.HideIngameTips end,
                setFunc = function(value) LUIE.CombatInfo.SV.HideIngameTips = value ZO_ActiveCombatTips:SetHidden(value) end,
                width = "full",
                default = LUIE.CombatInfo.D.HideIngameTips,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.CombatTipsEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Enable group member death alert",
                tooltip = "Display an alert when group member dies.",
                getFunc = function() return LUIE.CombatInfo.SV.GroupDeathEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.GroupDeathEnabled = value LUIE.CombatInfo.RegisterDeathEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.GroupDeathEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "checkbox",
                name = "Low Attribute Notifications",
                tooltip = "Enable notification display when players Health, Magicka or Stamina drops below threshold level.",
                getFunc = function() return LUIE.CombatInfo.SV.LowEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.LowEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.LowEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "slider",
                name = "Threshold level, %",
                --tooltip = "Threshold value.",
                min = 10, max = 50, step = 5,
                getFunc = function() return LUIE.CombatInfo.SV.LowThreshold end,
                setFunc = function(value) LUIE.CombatInfo.SV.LowThreshold = value LUIE.CombatInfo.thresholdAttribute = 0.01 * value end,
                width = "half",
                default = LUIE.CombatInfo.D.LowThreshold,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.LowEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Notification Sound",
                tooltip = "Play sound when players Health, Magicka or Stamina drops below threshold level.",
                getFunc = function() return LUIE.CombatInfo.SV.LowSound end,
                setFunc = function(value) LUIE.CombatInfo.SV.LowSound = value end,
                width = "half",
                default = LUIE.CombatInfo.D.LowSound,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.LowEnabled ) end,
            },
            {
                type = "checkbox",
                name = "Enable Execute alert",
                tooltip = "Enable notification display when targets health drops below specified threshold.",
                getFunc = function() return LUIE.CombatInfo.SV.ExecuteEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.ExecuteEnabled = value end,
                width = "full",
                default = LUIE.CombatInfo.D.ExecuteEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
            {
                type = "slider",
                name = "Threshold level, %",
                --tooltip = "Threshold value.",
                min = 20, max = 35, step = 1,
                getFunc = function() return LUIE.CombatInfo.SV.ExecuteThreshold end,
                setFunc = function(value) LUIE.CombatInfo.SV.ExecuteThreshold = value LUIE.CombatInfo.thresholdExecute = 0.01 * value end,
                width = "half",
                default = LUIE.CombatInfo.D.ExecuteThreshold,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ExecuteEnabled ) end,
            },
            {
                type = "slider",
                name = "Repeat timeout",
                tooltip = "Minimum amount of seconds between repeating this notification.",
                min = 4, max = 20, step = 1,
                getFunc = function() return LUIE.CombatInfo.SV.ExecuteTimeout end,
                setFunc = function(value) LUIE.CombatInfo.SV.ExecuteTimeout = value end,
                width = "half",
                default = LUIE.CombatInfo.D.ExecuteTimeout,
                disabled = function() return not ( LUIE.SV.CombatInfo_Enabled and LUIE.CombatInfo.SV.ExecuteEnabled ) end,
            },
            {
                type = "header",
                name = "Miscellaneous",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Enable Combat State notification",
                tooltip = "Enable notification when players enters or leaves combat.",
                getFunc = function() return LUIE.CombatInfo.SV.CombatStateEnabled end,
                setFunc = function(value) LUIE.CombatInfo.SV.CombatStateEnabled = value LUIE.CombatInfo.RegisterCombatStateEvent() end,
                width = "full",
                default = LUIE.CombatInfo.D.CombatStateEnabled,
                disabled = function() return not LUIE.SV.CombatInfo_Enabled end,
            },
        },
    }
    --[[ BUFFS AND DEBUFFS OPTIONS ]]--
    optionsData[#optionsData + 1] = {
        type = "submenu",
        name = "Buffs and Debuffs Options",
        reference = "Buffs_and_Debuffs_Options_Submenu",
        controls = {
            {
                type = "checkbox",
                name = "Enable Effects Tracking",
                tooltip = "Track and show various effects applied to Player and Target units.",
                getFunc = function() return LUIE.SV.SpellCastBuff_Enable end,
                setFunc = function(value) LUIE.SV.SpellCastBuff_Enable = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.D.SpellCastBuff_Enable,
            },
            {
                type = "checkbox",
                name = "Hide TARGET Buffs",
                tooltip = "Prevents buffs on your target from displaying.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.HideTargetBuffs end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.HideTargetBuffs = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.HideTargetBuffs,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Hide TARGET Debuffs",
                tooltip = "Prevents debuffs on your target from displaying.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.HideTargetDebuffs end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.HideTargetDebuffs = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.HideTargetDebuffs,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
             {
                type = "checkbox",
                name = "Hide GROUND Buffs and Debuffs",
                tooltip = "Prevents ground targeted effects from displaying..",
                getFunc = function() return LUIE.SpellCastBuffs.SV.HideGroundEffects end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.HideGroundEffects = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.SV.HideGroundEffects,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Hard-Lock position to Unit Frames",
                tooltip = "Hard-Lock position of buffs windows to Health bar of unit frames (default one or custom). This will forbid changing windows position indemendently.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.lockPositionToUnitFrames end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.lockPositionToUnitFrames = value end,
                width = "full",
                warning = "Will need to reload the UI.\nWhen this position is locked, you will not be able to move buffs.",
                default = LUIE.SpellCastBuffs.D.lockPositionToUnitFrames,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Unlock Buffs window",
                tooltip = "Unlock for dragging window with buffs icons. This will only unlock areas unaffected by previous option (if it is enabled).",
                getFunc = function() return l_BuffsMovingEnabled end,
                setFunc = function(value)
                    l_BuffsMovingEnabled = value
                    LUIE.SpellCastBuffs.SetMovingState(value)
                    end,
                width = "half",
                default = false,
                resetFunc = LUIE.SpellCastBuffs.ResetTlwPosition,
            },
            {
                type = "button",
                name = "Reset position",
                tooltip = "This will reset position of all three buff icon containers into somewhat screen-center position.",
                func = LUIE.SpellCastBuffs.ResetTlwPosition,
                width = "half",
            },
            {
                type = "header",
                name = "Icon options",
                width = "full",
            },
            {
                type = "slider",
                name = "Buff Icon size",
                -- tooltip = "Slider's tooltip text.",
                min = 30, max = 60, step = 2,
                getFunc = function() return LUIE.SpellCastBuffs.SV.IconSize end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IconSize = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.IconSize,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "dropdown",
                name = "Horizontal Icons Alignment",
                tooltip = "Horizontal alignment of buff and debuff icons within container area.",
                choices = hAlignOptions,
                getFunc = function() return LUIE.SpellCastBuffs.SV.Alignment end,
                setFunc = LUIE.SpellCastBuffs.SetIconsAlignment,
                width = "full",
                default = LUIE.SpellCastBuffs.D.Alignment,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "dropdown",
                name = "Descending sort direction",
                choices = {"Left to Right", "Right to Left"},
                getFunc = function() return LUIE.SpellCastBuffs.SV.SortDirection end,
                setFunc = LUIE.SpellCastBuffs.SetSortDirection,
                width = "full",
                default = LUIE.SpellCastBuffs.D.SortDirection,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Glow icon border",
                tooltip = "Use coloured glow border around each (de)buff icon.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.GlowIcons end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.GlowIcons = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.GlowIcons,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Display remaining border cooldown",
                tooltip = "Show border element, that run around icon as the buff is going to expire.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.RemainingCooldown end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.RemainingCooldown = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.RemainingCooldown,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Fade out expiring icon",
                tooltip = "When Buff is about to expire, make an icon transparent.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.FadeOutIcons end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.FadeOutIcons = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.FadeOutIcons,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Display remaining time label",
                tooltip = "Show text label with number of seconds left until the buff expire.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.RemainingText end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.RemainingText = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.RemainingText,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "dropdown",
                name = "Font",
                tooltip = "Font to display all buff text labels.",
                choices = FontsList,
                sort = "name-up",
                getFunc = function() return LUIE.SpellCastBuffs.SV.BuffFontFace end,
                setFunc = function(var) LUIE.SpellCastBuffs.SV.BuffFontFace = var LUIE.SpellCastBuffs.ApplyFont() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.BuffFontFace,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
            },
            {
                type = "slider",
                name = "Font Size",
                tooltip = "Font Size to be used on buff text labels.",
                min = 10, max = 30, step = 1,
                getFunc = function() return LUIE.SpellCastBuffs.SV.BuffFontSize end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.BuffFontSize = value LUIE.SpellCastBuffs.ApplyFont() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.BuffFontSize,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
            },
            {
                type = "dropdown",
                name = "Font Style",
                choices = styleOptions,
                sort = "name-up",
                getFunc = function() return LUIE.SpellCastBuffs.SV.BuffFontStyle end,
                setFunc = function(var) LUIE.SpellCastBuffs.SV.BuffFontStyle = var LUIE.SpellCastBuffs.ApplyFont() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.BuffFontStyle,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
            },
            {
                type = "checkbox",
                name = "Coloured time label",
                tooltip = "Set the colour of text label same as icon border or keep it white.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.RemainingTextColoured end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.RemainingTextColoured = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.RemainingTextColoured,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
            },
            {
                type = "checkbox",
                name = "Show second fractions",
                tooltip = "Format remaining text labes as \"12.3\" or keep only seconds \"12\".",
                getFunc = function() return LUIE.SpellCastBuffs.SV.RemainingTextMillis end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.RemainingTextMillis = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.RemainingTextMillis,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
            },
            {
                type = "header",
                name = "Long-term Effects",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Show Long-term Effects for Player",
                tooltip = "Show Player icons for effects with duration greater then 2 minutes.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.LongTermEffects_Player end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.LongTermEffects_Player = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.LongTermEffects_Player,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Long-term Effects for Target",
                tooltip = "Show Target icons for effects with duration greater then 2 minutes.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.LongTermEffects_Target end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.LongTermEffects_Target = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.LongTermEffects_Target,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Disguises",
                tooltip = "Set whether active disguises effects icons are shown.",
                getFunc = function() return not LUIE.SpellCastBuffs.SV.IgnoreDisguise end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IgnoreDisguise = not value LUIE.SpellCastBuffs.ReloadEffects() end,
                width = "full",
                default = not LUIE.SpellCastBuffs.D.IgnoreDisguise,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and ( LUIE.SpellCastBuffs.SV.LongTermEffects_Player or LUIE.SpellCastBuffs.SV.LongTermEffects_Target ) ) end,
            },
            {
                type = "checkbox",
                name = "Show Mundus Boons",
                tooltip = "Set whether Mundus Stone boons are shown.",
                getFunc = function() return not LUIE.SpellCastBuffs.SV.IgnoreMundus end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IgnoreMundus = not value LUIE.SpellCastBuffs.ReloadEffects() end,
                width = "full",
                default = not LUIE.SpellCastBuffs.D.IgnoreMundus,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and ( LUIE.SpellCastBuffs.SV.LongTermEffects_Player or LUIE.SpellCastBuffs.SV.LongTermEffects_Target ) ) end,
            },
            {
                type = "checkbox",
                name = "Show Equipment Effects",
                tooltip = "Set whether effects provided by wearing full set of equipment are shown.",
                getFunc = function() return not LUIE.SpellCastBuffs.SV.IgnoreEquipment end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IgnoreEquipment = not value LUIE.SpellCastBuffs.ReloadEffects() end,
                width = "full",
                default = not LUIE.SpellCastBuffs.D.IgnoreEquipment,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and ( LUIE.SpellCastBuffs.SV.LongTermEffects_Player or LUIE.SpellCastBuffs.SV.LongTermEffects_Target ) ) end,
            },
            {
                type = "checkbox",
                name = "Show Vampire / Werewolf",
                tooltip = "Set whether to show Vampirism and Lycanthropy buffs.",
                getFunc = function() return not LUIE.SpellCastBuffs.SV.IgnoreVampLycan end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IgnoreVampLycan = not value LUIE.SpellCastBuffs.ReloadEffects() end,
                width = "full",
                default = not LUIE.SpellCastBuffs.D.IgnoreVampLycan,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and ( LUIE.SpellCastBuffs.SV.LongTermEffects_Player or LUIE.SpellCastBuffs.SV.LongTermEffects_Target ) ) end,
            },
            {
                type = "checkbox",
                name = "Show Cyrodiil Bonuses",
                tooltip = "Set whether buffs provided during Cyrodiil AvA are shown.",
                getFunc = function() return not LUIE.SpellCastBuffs.SV.IgnoreCyrodiil end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.IgnoreCyrodiil = not value LUIE.SpellCastBuffs.ReloadEffects() end,
                width = "full",
                default = not LUIE.SpellCastBuffs.D.IgnoreCyrodiil,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and ( LUIE.SpellCastBuffs.SV.LongTermEffects_Player or LUIE.SpellCastBuffs.SV.LongTermEffects_Target ) ) end,
            },
            {
                type = "checkbox",
                name = "Use separate control for Player effects",
                tooltip = "Move Player effects icons for long-term effects into independent separate control.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.LongTermEffectsSeparate end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.LongTermEffectsSeparate = value LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.LongTermEffectsSeparate,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.LongTermEffects_Player ) end,
            },
            {
                type = "dropdown",
                name = "Container orientation",
                tooltip = "Change orientation of long-term effects to Horizontal or Vertical tiling method.",
                choices = rotationOptions,
                getFunc = function() return rotationOptions[LUIE.SpellCastBuffs.SV.LongTermEffectsSeparateAlignment] end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.LongTermEffectsSeparateAlignment = rotationOptionsKeys[value] LUIE.SpellCastBuffs.Reset() end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = rotationOptions[2],
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.LongTermEffects_Player and LUIE.SpellCastBuffs.SV.LongTermEffectsSeparate ) end,
            },
            {
                type = "dropdown",
                name = "Vertical Icons Alignment",
                tooltip = "Vertical alignment of buff and debuff icons within container area.",
                choices = vAlignOptions,
                getFunc = function() return LUIE.SpellCastBuffs.SV.AlignmentVert end,
                setFunc = LUIE.SpellCastBuffs.SetIconsAlignmentVert,
                width = "full",
                default = LUIE.SpellCastBuffs.D.AlignmentVert,
                disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.LongTermEffectsSeparateAlignment == 2) end,
            },
            {
                type = "header",
                name = "Miscellaneous",
                width = "full",
            },
            --[[ Ultimate Generation detection code in SCB module is broken
            {
                type = "checkbox",
                name = "Show Ultimate Generation icon",
                tooltip = "Display special buff icon when in-combat ultimate generation is detected.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.UltimateGeneration end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.UltimateGeneration = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.UltimateGeneration,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            --]]
            {
                type = "checkbox",
                name = "Highlight Ability Bar Icon for Active Procs",
                tooltip = "Highlights an ability that is in a procced state on the ability bar.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowTriggered end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowTriggered = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowTriggered,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Highlight Ability Bar Icon for Active Effects",
                tooltip = "Highlights currently active buffs on the ability bar for their active duration.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowToggled end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowToggled = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowToggled,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Block icon",
                tooltip = "Display special buff icon when player is holding block.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowBlock end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowBlock = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowBlock,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Stealth icon",
                tooltip = "Display special buff icon when player is hidden or in stealth.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.StealthState end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.StealthState = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.StealthState,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Sprint icon",
                tooltip = "Display special buff icon when player is sprinting.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowSprint end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowSprint = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowSprint,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Gallop icon",
                tooltip = "Display special buff icon when player is mounted and galloping.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowGallop end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowGallop = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowGallop,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Resurrection Immunity icon",
                tooltip = "Display special buff icon when player is resurrecting and immune to damage.",
                getFunc = function() return LUIE.SpellCastBuffs.SV.ShowResurrectionImmunity end,
                setFunc = function(value) LUIE.SpellCastBuffs.SV.ShowResurrectionImmunity = value end,
                width = "full",
                default = LUIE.SpellCastBuffs.D.ShowResurrectionImmunity,
                disabled = function() return not LUIE.SV.SpellCastBuff_Enable end,
            },
        },
    }
    --[[ DAMAGE METER & COMBAT LOG ]]--
    optionsData[#optionsData + 1] = {
        type = "submenu",
        name = "Damage Meter & Combat Log",
        reference = "Damage_Meter_and_Combat_Log_Submenu",
        controls = {
            {
                type = "checkbox",
                name = "Enable Damage Meter",
                tooltip = "Counts damage and healing done.",
                getFunc = function() return LUIE.SV.DamageMeter_Enable end,
                setFunc = function(value) LUIE.SV.DamageMeter_Enable = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.D.DamageMeter_Enable,
            },
            {
                type = "slider",
                name = "Timeout Threshold",
                tooltip = "Number of seconds without damage to signal encounter termination.",
                min = 1, max = 10, step = 1,
                getFunc = function() return LUIE.DamageMeter.SV.DamageTimeout end,
                setFunc = function(value) LUIE.DamageMeter.SV.DamageTimeout = value end,
                width = "full",
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
                default = LUIE.DamageMeter.D.DamageTimeout,
            },
            {
                type = "checkbox",
                name = "Update Damage Statistics in realtime",
                tooltip = "Update Full Damage Meter window during combat. Otherwise it is updated when being displayed with information of last combat.",
                getFunc = function() return LUIE.DamageMeter.SV.UpdateFullRealtime end,
                setFunc = function(value) LUIE.DamageMeter.SV.UpdateFullRealtime = value end,
                width = "full",
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
                default = LUIE.DamageMeter.D.UpdateFullRealtime,
            },
            {
                type = "checkbox",
                name = "Unlock window",
                tooltip = "Allow mouse dragging for Damage Meter window.",
                getFunc = function() return LUIE.DamageMeter.panelUnlocked end,
                setFunc = LUIE.DamageMeter.SetMovingState,
                width = "half",
                default = false,
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
                resetFunc = LUIE.DamageMeter.ResetTlwPosition,
            },
            {
                type = "button",
                name = "Reset position",
                tooltip = "This will reset position of Damage Meter window into screen top left corner.",
                func = LUIE.DamageMeter.ResetTlwPosition,
                width = "half",
            },
            {
                type = "header",
                name = "Meter Mini-panel",
                width = "full",
            },
            {
                type = "checkbox",
                name = "Show Fight time label",
                tooltip = "Include Fight time control as 4th element on mini-panel.",
                getFunc = function() return LUIE.DamageMeter.SV.FightTime end,
                setFunc = function(value) LUIE.DamageMeter.SV.FightTime = value LUIE.DamageMeter.LayoutMiniPanel() end,
                width = "full",
                default = LUIE.DamageMeter.D.FightTime,
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
            },
            {
                type = "checkbox",
                name = "Show Background on Mini-meter panel",
                tooltip = "Create mini-panel with background or leave it completely transparent.",
                getFunc = function() return LUIE.DamageMeter.SV.Backdrop end,
                setFunc = function(value) LUIE.DamageMeter.SV.Backdrop = value LUIE.DamageMeter.LayoutMiniPanel() end,
                width = "full",
                default = LUIE.DamageMeter.D.Backdrop,
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
            },
            {
                type = "header",
                name = "Notes",
                width = "full",
            },
            {
                type = "description",
                text = "You can click on incoming damage label to display full combat statistics for completed fight. Clicking on 'fight time' label will display graphical log of the fight. To report to chat your damage/healing performance click on damage and healing text labels on the meter mini-panel.",
            },
            {
                type = "description",
                text = "You can also setup unique key bindings for those actions in standard game 'Controls' menu.",
            },
            {
                type = "checkbox",
                name = "Enable Combat Log",
                tooltip = "Enable Combat Log component to print combat related information into separate chat tab named 'Combat Log'.",
                getFunc = function() return LUIE.DamageMeter.SV.CombatLog end,
                setFunc = function(value) LUIE.DamageMeter.SV.CombatLog = value LUIE.DamageMeter.RegisterCombatStateEvent() LUIE.DamageMeter.RegisterEffectChangedEvent() end,
                width = "full",
                default = LUIE.DamageMeter.D.CombatLog,
                disabled = function() return not LUIE.SV.DamageMeter_Enable end,
            },
            {
                type = "checkbox",
                name = "Include Time Stamp",
                tooltip = "Include time of each combat event.",
                getFunc = function() return LUIE.DamageMeter.SV.LogTimeStamp end,
                setFunc = function(value) LUIE.DamageMeter.SV.LogTimeStamp = value end,
                width = "full",
                default = LUIE.DamageMeter.D.LogTimeStamp,
                disabled = function() return not (LUIE.SV.DamageMeter_Enable and LUIE.DamageMeter.SV.CombatLog) end,
            },
            {
                type = "checkbox",
                name = "Focus in combat",
                tooltip = "Switch active chat tab to CombatLog when enterring combat and resore the original one when finishing combat.",
                getFunc = function() return LUIE.DamageMeter.SV.CombatLogFocus end,
                setFunc = function(value) LUIE.DamageMeter.SV.CombatLogFocus = value LUIE.DamageMeter.RegisterCombatStateEvent() end,
                width = "full",
                default = LUIE.DamageMeter.D.CombatLogFocus,
                disabled = function() return not (LUIE.SV.DamageMeter_Enable and LUIE.DamageMeter.SV.CombatLog) end
            },
            {
                type = "checkbox",
                name = "Log debuffs on player",
                tooltip = "Include in CombatLog events when negative effect was applied to player character.",
                getFunc = function() return LUIE.DamageMeter.SV.CombatLogDebuff end,
                setFunc = function(value) LUIE.DamageMeter.SV.CombatLogDebuff = value LUIE.DamageMeter.RegisterEffectChangedEvent() end,
                width = "full",
                default = LUIE.DamageMeter.D.CombatLogDebuff,
                disabled = function() return not (LUIE.SV.DamageMeter_Enable and LUIE.DamageMeter.SV.CombatLog) end,
            },
            {
                type = "slider",
                name = "Font Size Adjustment",
                tooltip = "Used to change size of Combat Log font with respect to default chat font size.",
                min = -3, max = 2, step = 1,
                getFunc = function() return LUIE.DamageMeter.SV.CombatLogFont end,
                setFunc = function(value) LUIE.DamageMeter.SV.CombatLogFont = value LUIE.DamageMeter.OnPlayerActivated() end,
                width = "full",
                default = LUIE.DamageMeter.D.CombatLogFont,
                disabled = function() return not (LUIE.SV.DamageMeter_Enable and LUIE.DamageMeter.SV.CombatLog) end,
            },
            {
                type = "checkbox",
                name = "Preserve between logins",
                tooltip = "Try to save last 20 log elements between character logins. Though this will not work if you game crashes instead exiting normally.",
                getFunc = function() return LUIE.DamageMeter.SVC.LogSaveEnable end,
                setFunc = function(value) LUIE.DamageMeter.SVC.LogSaveEnable = value end,
                width = "full",
                default = LUIE.DamageMeter.DC.LogSaveEnable,
                disabled = function() return not (LUIE.SV.DamageMeter_Enable and LUIE.DamageMeter.SV.CombatLog) end,
            },
            --[[
            {
                type = "header",
                name = "Notes",
                width = "full",
            },
            --]]
            {
                type = "description",
                text = "This component will create new chat tab 'CombatLog' and will send all combat related text into it. If you delete this tab it will be automatically recreated. If you wish to stop using this component, then first disable it here in menu and after it delete chat tab manually.",
            },
        },

    }

    --[[ CHAT ANNOUNCEMENTS OPTIONS ]]--
    optionsData[#optionsData + 1] = {
        type = "submenu",
        name = "Chat Announcements Options",
        reference = "Chat_Announcements_Options_Submenu",
        controls = {
            {
                type = "checkbox",
                name = "Enable Chat Announcements",
                tooltip = "Print messages to chat for various events.",
                getFunc = function() return LUIE.SV.ChatAnnouncements_Enable end,
                setFunc = function(value) LUIE.SV.ChatAnnouncements_Enable = value end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                default = LUIE.D.ChatAnnouncements_Enable,
            },
            {
                type = "dropdown",
                name = "Player Name Display Method",
                tooltip = "Determines the method used to display player names in Chat Announcements where applicable.\nDefault: Character Name",
                choices = chatnameDisplayOptions,
                getFunc = function() return chatnameDisplayOptions[LUIE.ChatAnnouncements.SV.ChatPlayerDisplayOptions] end,
                setFunc = function(value) LUIE.ChatAnnouncements.SV.ChatPlayerDisplayOptions = chatnameDisplayOptionsKeys[value] end,
                width = "full",
                disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                default = chatnameDisplayOptions[2],
            },
            {
                type = "checkbox",
                name = "Enable Default String Enhancements",
                tooltip = "Replaces a variety of default strings with enhanced syntax to match the Chat Announcements component. Disable this option if you are having compatibility issues with other addons. Highly recommend using it otherwise!\nNOTE: This is currently only localized in English.",
                getFunc = function() return LUIE.ChatAnnouncements.SV.CustomStrings end,
                setFunc = function(value) LUIE.ChatAnnouncements.SV.CustomStrings = value LUIE.ChatAnnouncements.RegisterCustomStrings() end,
                width = "full",
                warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
                disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                default = LUIE.ChatAnnouncements.D.CustomStrings,
            },
            {
                type = "submenu",
                name = "Misc Announcements",
                reference = "Chat_Announcements_Options_Misc_Announcements_Submenu",
                controls = {
                    {
                        type = "checkbox",
                        name = "Show Group Event Messages",
                        tooltip = "Print a notification to chat for group invites, group composition changes, and LFG features.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.GroupChatMsg end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.GroupChatMsg = value LUIE.ChatAnnouncements.RegisterGroupEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.GroupChatMsg,
                    },
                    {
                        type = "checkbox",
                        name = "Show Trade Event Messages",
                        tooltip = "Prints a notification to chat for trade invitations, cancellation, and success.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscTrade end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscTrade = value LUIE.ChatAnnouncements.RegisterTradeEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscTrade,
                    },
                    {
                        type = "checkbox",
                        name = "Show Mail Event Messages",
                        tooltip = "Prints a notification to chat when mail is accepted, deleted, or sent.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscMail end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscMail = value LUIE.ChatAnnouncements.RegisterMailEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscMail,
                    },
                    {
                        type = "checkbox",
                        name = "Show Social Event Messages",
                        tooltip = "Prints a notification to chat for friend invites, friend list changes, and ignore list changes.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscSocial end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscSocial = value LUIE.ChatAnnouncements.RegisterSocialEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscSocial,
                    },
                    {
                        type = "checkbox",
                        name = "Show Guild Event Messages",
                        tooltip = "Prints a notification to chat for guild invites and members joining/leaving one of your guilds.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscGuild end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscGuild = value LUIE.ChatAnnouncements.RegisterGuildEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscGuild,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Guild Icons",
                        tooltip = "Displays the faction icon or guild rank icon for guild messages.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscGuildIcon end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscGuildIcon = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.MiscGuild and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.MiscGuildIcon,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Guild Rank Changes",
                        tooltip = "Prints a notification to chat for player guild rank changes. Options are determined by the dropdown menu below.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscGuildRank end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscGuildRank = value LUIE.ChatAnnouncements.RegisterGuildEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.MiscGuild and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.MiscGuildRank,
                    },
                    {
                        type = "dropdown",
                        name = "\t\t\t\tGuild Rank Changes Display Options",
                        tooltip = "Choose the method in which guild rank changes will be reported.\nDefault: Self Only",
                        choices = guildrankDisplayOptions,
                        getFunc = function() return guildrankDisplayOptions[LUIE.ChatAnnouncements.SV.GuildRankDisplayOptions] end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.GuildRankDisplayOptions = guildrankDisplayOptionsKeys[value] LUIE.ChatAnnouncements.RegisterGuildEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.MiscGuild and LUIE.ChatAnnouncements.SV.MiscGuildRank and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = guildrankDisplayOptions[1],
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Guild MOTD Message Changes",
                        tooltip = "Print a notifcation to chat when the MOTD for one of your guilds is updated.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscGuildMOTD end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscGuildMOTD = value LUIE.ChatAnnouncements.RegisterGuildEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.MiscGuild and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.MiscGuildMOTD,
                    },
                    {
                        type = "checkbox",
                        name = "Show Bag/Bank Upgrade Messages",
                        tooltip = "Print a notification to chat when bag or bank space upgrades are purchased ingame or through the crown store.\nNOTE: Currency changes can be ammended onto this statement.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscBags end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscBags = value LUIE.ChatAnnouncements.RegisterBagEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscBags,
                    },
                    {
                        type = "checkbox",
                        name = "Show Riding Skill Upgrade Messages",
                        tooltip = "Print a notification to chat when riding upgrades are purchased or Crown Riding Skill books are used.\nNOTE: Currency changes can be ammended onto this statement.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscHorse end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscHorse = value LUIE.ChatAnnouncements.RegisterHorseEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscHorse,
                    },
                    {
                        type = "checkbox",
                        name = "Show Lockpick Failure/Success Messages",
                        tooltip = "Print a notification to chat when for failed or successful lockpick attempts.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscLockpick end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscLockpick = value LUIE.ChatAnnouncements.RegisterLockpickEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscLockpick,
                    },
                    {
                        type = "checkbox",
                        name = "Show Justice Confiscation Messages",
                        tooltip = "Print a notification to chat when items or gold are confiscated by a guard through dialogue or player death.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.MiscConfiscate end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.MiscConfiscate = value LUIE.ChatAnnouncements.RegisterDestroyEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.MiscConfiscate,
                    },
                },
            },
            {
                type = "submenu",
                name = "Currency Announcements",
                reference = "Chat_Announcements_Options_Currency_Announcements_Submenu",
                controls = {
                    {
                        type = "checkbox",
                        name = "Show Looted Currency Icons",
                        tooltip = "Display an icon for the relative type of currency when a notification is printed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.CurrencyIcons end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyIcons = value end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.CurrencyIcons,
                    },
                    {
                        type = "checkbox",
                        name = "Show Gold Changes",
                        tooltip = "Print a context sensitive notification to chat when gold is gained or lost.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.GoldChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.GoldChange = value LUIE.ChatAnnouncements.RegisterGoldEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.GoldChange,
                    },
                    {
                        type = "colorpicker",
                        name = "\t\t\t\tGold Change Color",
                        getFunc = function() return unpack(LUIE.ChatAnnouncements.SV.GoldColor) end,
                        setFunc = function(r, g, b, a) LUIE.ChatAnnouncements.SV.GoldColor = { r, g, b, a } LUIE.ChatAnnouncements.RegisterGoldEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.GoldChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = {r=LUIE.ChatAnnouncements.D.GoldColor[1], g=LUIE.ChatAnnouncements.D.GoldColor[2], b=LUIE.ChatAnnouncements.D.GoldColor[3]}
                    },
                    {
                        type = "editbox",
                        name = "\t\t\t\tGold Name",
                        tooltip = "Name to display for Gold. \"s\" will be added onto plural quantities of this name unless using one of the special formats listed below.\nSPECIAL FORMATTING:\nUsing \"Gold\", \"Currency\", \"G\", or \"GP\" will bypass the plural addition.\nUsing \"g\" or \"gp\" will remove the spacing between the change amount and name as well as bypass the plural addition.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.GoldName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.GoldName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.GoldChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.GoldName,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow total amount of Gold",
                        tooltip = "Show total amount of Gold after change is displayed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TotalGoldChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TotalGoldChange = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.GoldChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TotalGoldChange,
                    },
                    {
                        type = "checkbox",
                        name = "Show Alliance Point Changes",
                        tooltip = "Print a context sensitive notification to chat when Alliance Points are earned or spent.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AlliancePointChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AlliancePointChange = value LUIE.ChatAnnouncements.RegisterAlliancePointEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.AlliancePointChange,
                    },
                    {
                        type = "slider",
                        name = "\t\t\t\tAlliance Point Gain - Filter Threshold",
                        tooltip = "Alliance point gains under this threshold will not display in chat, this option is intended to reduce spam from group PVP combat.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AlliancePointFilter end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AlliancePointFilter = value end,
                        min = 0,
                        max = 10000,
                        step = 50,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.AlliancePointChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.AlliancePointFilter,
                    },
                    {
                        type = "colorpicker",
                        name = "\t\t\t\tAlliance Point Change Color",
                        getFunc = function() return unpack(LUIE.ChatAnnouncements.SV.AlliancePointColor) end,
                        setFunc = function(r, g, b, a) LUIE.ChatAnnouncements.SV.AlliancePointColor = { r, g, b, a } LUIE.ChatAnnouncements.RegisterAlliancePointEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.AlliancePointChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = {r=LUIE.ChatAnnouncements.D.AlliancePointColor[1], g=LUIE.ChatAnnouncements.D.AlliancePointColor[2], b=LUIE.ChatAnnouncements.D.AlliancePointColor[3]}
                    },
                    {
                        type = "editbox",
                        name = "\t\t\t\tAlliance Point Name",
                        tooltip = "Name to display for Alliance Points. \"s\" will be added onto plural quantities of this name unless using one of the special formats listed below.\nSPECIAL FORMATTING:\nUsing \"A\" or \"AP\" will bypass the plural addition.\nUsing \"a\" or \"ap\" will remove the spacing between the change amount and name as well as bypass the plural addition.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AlliancePointName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AlliancePointName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.AlliancePointChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TotalAlliancePointName,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow total amount of Alliance Points",
                        tooltip = "Show total amount of Alliance Points after change is displayed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TotalAlliancePointChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TotalAlliancePointChange = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.AlliancePointChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TotalAlliancePointChange,
                    },
                    {
                        type = "checkbox",
                        name = "Show Tel Var Stone Changes",
                        tooltip = "Print a context sensitive notification to chat when Tel Var Stones are gained or lost.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TelVarStoneChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TelVarStoneChange = value LUIE.ChatAnnouncements.RegisterTelVarStoneEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.TelVarStoneChange,
                    },
                    {
                        type = "colorpicker",
                        name = "\t\t\t\tTel Var Stone Change Color",
                        getFunc = function() return unpack(LUIE.ChatAnnouncements.SV.TelVarStoneColor) end,
                        setFunc = function(r, g, b, a) LUIE.ChatAnnouncements.SV.TelVarStoneColor = { r, g, b, a } LUIE.ChatAnnouncements.RegisterTelVarStoneEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.TelVarStoneChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = {r=LUIE.ChatAnnouncements.D.TelVarStoneColor[1], g=LUIE.ChatAnnouncements.D.TelVarStoneColor[2], b=LUIE.ChatAnnouncements.D.TelVarStoneColor[3]}
                    },
                    {
                        type = "editbox",
                        name = "\t\t\t\tTel Var Stone Name",
                        tooltip = "Name to display for Tel Var Stones. \"s\" will be added onto plural quantities of this name unless using one of the special formats listed below.\nSPECIAL FORMATTING:\nUsing \"Tel Var\", \"TelVar\", \"T\", \"TV\", or \"TVS\" will bypass the plural addition.\nUsing \"t\", \"tv\", or \"tvs\" will remove the spacing between the change amount and name as well as bypass the plural addition.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TelVarStoneName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TelVarStoneName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.TelVarStoneChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TelVarStoneName,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow total amount of Tel Var Stones",
                        tooltip = "Show total amount of Tel Var Stones after change is displayed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TotalTelVarStoneChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TotalTelVarStoneChange = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.TelVarStoneChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TotalTelVarStoneChange,
                    },
                    {
                        type = "checkbox",
                        name = "Show Writ Voucher Changes",
                        tooltip = "Print a context sensitive notification to chat when Writ Vouchers are rewarded or spent.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.WritVoucherChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.WritVoucherChange = value LUIE.ChatAnnouncements.RegisterWritVoucherEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.WritVoucherChange,
                    },
                    {
                        type = "colorpicker",
                        name = "\t\t\t\tWrit Voucher Change Color",
                        getFunc = function() return unpack(LUIE.ChatAnnouncements.SV.WritVoucherColor) end,
                        setFunc = function(r, g, b, a) LUIE.ChatAnnouncements.SV.WritVoucherColor = { r, g, b, a } LUIE.ChatAnnouncements.RegisterWritVoucherEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.WritVoucherChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = {r=LUIE.ChatAnnouncements.D.WritVoucherColor[1], g=LUIE.ChatAnnouncements.D.WritVoucherColor[2], b=LUIE.ChatAnnouncements.D.WritVoucherColor[3]}
                    },
                    {
                        type = "editbox",
                        name = "\t\t\t\tWrit Voucher Name",
                        tooltip = "Name to display for Writ Vouchers. \"s\" will be added onto plural quantities of this name unless using one of the special formats listed below.\nSPECIAL FORMATTING:\nUsing \"WV\", \"W\", or \"V\" will bypass the plural addition.\nUsing \"wv\", \"w\", or \"v\" will remove the spacing between the change amount and name as well as bypass the plural addition.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.WritVoucherName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.WritVoucherName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.WritVoucherChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.WritVoucherName,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow total amount of Writ Vouchers",
                        tooltip = "Show total amount of Writ Vouchers after change is displayed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.TotalWritVoucherChange end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.TotalWritVoucherChange = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.WritVoucherChange and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.TotalWritVoucherChange,
                    },
                    {
                        type = "dropdown",
                        name = "Bracket Settings for Context Specific Messages",
                        choices = currencyBracketOptions,
                        tooltip = "Allows you to customize the format of the Brackets present on Context Specific Messages.\nDefault: []",
                        getFunc = function() return currencyBracketOptions[LUIE.ChatAnnouncements.SV.CurrencyBracketDisplayOptions] end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyBracketDisplayOptions = currencyBracketOptionsKeys[value] end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.GoldChange or
                                LUIE.ChatAnnouncements.SV.AlliancePointChange or
                                LUIE.ChatAnnouncements.SV.TelVarStoneChange or
                                LUIE.ChatAnnouncements.SV.WritVoucherChange or
                                LUIE.SV.ChatAnnouncements_Enable
                            )) end,
                        default = currencyBracketOptions[1]
                    },
                    {
                        type = "checkbox",
                        name = "Allow override Context specific messages",
                        tooltip = "When toggled on, allows you to enter a message in the field below to replace the default context based messages for currency changes.\nNote: These changes will still recolor to green/red depending on the context of currency change.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.CurrencyContextToggle end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyContextToggle = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.GoldChange or
                                LUIE.ChatAnnouncements.SV.AlliancePointChange or
                                LUIE.ChatAnnouncements.SV.TelVarStoneChange or
                                LUIE.ChatAnnouncements.SV.WritVoucherChange or
                                LUIE.SV.ChatAnnouncements_Enable
                            )) end,
                        default = LUIE.ChatAnnouncements.D.CurrencyContextToggle,
                    },
                    {
                        type = "editbox",
                        name = "Context Override Message - Currency Gain",
                        tooltip = "Enter a string to replace the default context specific bracketed message displayed before POSITIVE currency changes.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.CurrencyContextMessageUp end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyContextMessageUp = value end,
                        width = "full",
                        disabled =  function() return not (LUIE.ChatAnnouncements.SV.CurrencyContextToggle and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.CurrencyContextMessageUp,
                    },
                    {
                        type = "editbox",
                        name = "Context Override Message - Currency Loss",
                        tooltip = "Enter a string to replace the default context specific bracketed message displayed before NEGATIVE currency changes.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.CurrencyContextMessageDown end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyContextMessageDown = value end,
                        width = "full",
                        disabled =  function() return not (LUIE.ChatAnnouncements.SV.CurrencyContextToggle and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.CurrencyContextMessageDown,
                    },
                    {
                        type = "editbox",
                        name = "Total Currency Message",
                        tooltip = "Change the message displayed before total currency listed.\nDefault = (\"[New Total]\")",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.CurrencyTotalMessage end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.CurrencyTotalMessage = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.GoldChange or
                                LUIE.ChatAnnouncements.SV.AlliancePointChange or
                                LUIE.ChatAnnouncements.SV.TelVarStoneChange or
                                LUIE.ChatAnnouncements.SV.WritVoucherChange or
                                LUIE.SV.ChatAnnouncements_Enable
                            )) end,
                        default = LUIE.ChatAnnouncements.D.CurrencyTotalMessage,
                    },
                },
            },
            {
                type = "submenu",
                name = "Loot Announcements",
                reference = "Chat_Announcements_Options_Loot_Announcements_Submenu",
                controls = {
                    {
                        type = "checkbox",
                        name = "Show Looted Item Icons",
                        tooltip = "Display an icon for looted items.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootIcons end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootIcons = value end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootIcons,
                    },
                    {
                        type = "checkbox",
                        name = "Show Looted Items",
                        tooltip = "Display items looted from corpses, containers, pickpocketing, and quest rewards.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.Loot end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.Loot = value LUIE.ChatAnnouncements.RegisterLootEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.Loot,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Only Notable Loot",
                        tooltip = "Don't show all looted items but only notable ones. (Any set items, any purple+ items, any blue+ special items).",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootOnlyNotable end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootOnlyNotable = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Loot and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.LootOnlyNotable,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Group Members Notable Loot",
                        tooltip = "Also show the notable loot group members receive. (Any set items, any purple+ items, any blue+ special items).",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootGroup end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootGroup = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Loot and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.LootGroup,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tHide Annoying Notable Items",
                        tooltip = "Don't show:\nLaurel\nMalachite Shard\nUndaunted Plunder\nThe Serpent's Egg-Tooth\nThe Rid-Thar's Moon Pearls\nStar-Studded Champion's Baldric\nPeriapt of Elinhir\nGlass Style Motif Fragments\nMercenary Motif Pages",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootBlacklist end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootBlacklist = value end,
                        width = "full",
                        warning = "This prevents chat spam in large groups (Trials)",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Loot and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.LootBlacklist,
                    },
                    {
                        type = "checkbox",
                        name = "Show Vendor Inventory Changes",
                        tooltip = "Display items purchased or sold at a vendor.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootVendor end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootVendor = value LUIE.ChatAnnouncements.RegisterVendorEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootVendor,
                    },
                    {
                        type = "checkbox",
                        name = "Show Bank Inventory Changes",
                        tooltip = "Display items deposited or withdrawn from a bank or guild bank.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootBank end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootBank = value LUIE.ChatAnnouncements.RegisterBankEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootBank,
                    },
                    {
                        type = "checkbox",
                        name = "Show Mail Inventory Changes",
                        tooltip = "Display items received or sent in the mail.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootMail end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootMail = value LUIE.ChatAnnouncements.RegisterMailEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootMail,
                    },
                    {
                        type = "checkbox",
                        name = "Show Trade",
                        tooltip = "Display items received or lost in a trade.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootTrade end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootTrade = value LUIE.ChatAnnouncements.RegisterTradeEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootTrade,
                    },
                    {
                        type = "checkbox",
                        name = "Show Craft",
                        tooltip = "Display items recieved, lost, or upgraded from crafting.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootCraft end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootCraft = value LUIE.ChatAnnouncements.RegisterCraftEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.LootCraft,
                    },
                    {
                        type = "checkbox",
                        name = "\t\t\t\tShow Materials consumed when crafting",
                        tooltip = "Toggles whether or not the materials used by a crafting pattern will report to chat.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ShowCraftUse end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ShowCraftUse = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.LootCraft and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ShowCraftUse,
                    },
                    {
                        type = "checkbox",
                        name = "Show Confiscated Items",
                        tooltip = "Display items confiscated by guards.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ShowConfiscate end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ShowConfiscate = value LUIE.ChatAnnouncements.RegisterDestroyEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.ShowConfiscate,
                    },
                    {
                        type = "checkbox",
                        name = "Show Destroyed Items",
                        tooltip = "Will show when an item is destroyed.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ShowDestroy end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ShowDestroy = value LUIE.ChatAnnouncements.RegisterDestroyEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.ShowDestroy,
                    },
                    {
                        type = "checkbox",
                        name = "Show Armor Type",
                        tooltip = "Show the armor type of gear items in the log.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootShowArmorType end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootShowArmorType = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.LootShowArmorType,
                    },
                    {
                        type = "checkbox",
                        name = "Show Item Trait",
                        tooltip = "Show the traits of gear items in the log.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootShowTrait end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootShowTrait = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.LootShowTrait,
                    },
                    {
                        type = "checkbox",
                        name = "Show Item Style",
                        tooltip = "Show the style of gear items in the log.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootShowStyle end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootShowStyle = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.LootShowStyle,
                    },
                    {
                        type = "checkbox",
                        name = "Hide Trash Quality Items",
                        tooltip = "Don't show trash quality items.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootNotTrash end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootNotTrash = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.LootNotTrash,
                    },
                    {
                        type = "dropdown",
                        name = "Bracket Settings for Context Specific Messages",
                        choices = itemBracketOptions,
                        tooltip = "Allows you to customize the format of the Brackets present on Context Specific Messages.",
                        getFunc = function() return itemBracketOptions[LUIE.ChatAnnouncements.SV.ItemBracketDisplayOptions] end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ItemBracketDisplayOptions = itemBracketOptionsKeys[value] end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = itemBracketOptions[1]
                    },
                    {
                        type = "checkbox",
                        name = "Allow Override Item Context Specific Messages",
                        tooltip = "When toggled on, allows you to enter a message in the field below to replace the default context based messages for items received or lost.\nNote: These changes will still recolor to green/red depending on context.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ItemContextToggle end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ItemContextToggle = value end,
                        width = "full",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.ItemContextToggle,
                    },
                    {
                        type = "editbox",
                        name = "Context Specific Override Message - Loot",
                        tooltip = "Enter a string to replace the default context specific bracketed message displayed before item changes.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ItemContextMessage end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ItemContextMessage = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.ItemContextToggle and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ItemContextMessage,
                    },
                    {
                        type = "checkbox",
                        name = "Merge LootLog Sales with Currency Changes",
                        tooltip = "Enabling this option will cause the 2 individual messages when you purchase/sell an item at a vendor to merge into one combined line.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LootCurrencyCombo end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LootCurrencyCombo = value end,
                        width = "full",
                        warning = "Enable this only if you know what you are doing.",
                        disabled = function() return not (LUIE.SV.ChatAnnouncements_Enable and
                            (
                                LUIE.ChatAnnouncements.SV.Loot or
                                LUIE.ChatAnnouncements.SV.LootCraft or
                                LUIE.ChatAnnouncements.SV.LootTrade or
                                LUIE.ChatAnnouncements.SV.LootMail or
                                LUIE.ChatAnnouncements.SV.LootVendor or
                                LUIE.ChatAnnouncements.SV.LootBank
                            )) end,
                        default = LUIE.ChatAnnouncements.D.LootCurrencyCombo,
                    },
                },
            },
            {
                type = "submenu",
                name = "Experience Announcements",
                reference = "Chat_Announcements_Options_Experience_Announcements_Submenu",
                controls = {
                    {
                        type = "checkbox",
                        name = "Display Level Up Message in Chat",
                        tooltip = "Displays a message in chat when the player levels up.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceLevelUp end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceLevelUp = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.ExperienceLevelUp,
                    },
                    {
                        type = "checkbox",
                        name = "Display Level Icon on Level Up",
                        tooltip = "Toggle the display of the normal level icon or relevant champion point type icon when a level is gained.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.LevelUpIcon end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.LevelUpIcon = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.ExperienceLevelUp and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.LevelUpIcon,
                    },
                    {
                        type = "checkbox",
                        name = "Show Experience Gain",
                        tooltip = "Enable print experience gain to chat.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.Experience end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.Experience = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.Experience,
                    },
                    {
                        type = "checkbox",
                        name = "Display Experience Icon",
                        tooltip = "Toggle the display of an icon with experience point gain.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceIcon end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceIcon = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceIcon,
                    },
                    {
                        type = "slider",
                        name = "Combat Experience Gain - Filter Threshold",
                        tooltip = "Experience Point gains from kills under this threshold will not display in chat.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceFilter end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceFilter = value end,
                        min = 0,
                        max = 10000,
                        step = 100,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceFilter,
                    },
                    {
                        type = "editbox",
                        name = "Context Name for Experience Gain",
                        tooltip = "Modify the message that appears before reporting the # of experience points gained. This option is intended to offer contrast from currency and loot messages since experience gain is not context sensitive.\nDefault: \"[Earned]\"",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceContextName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceContextName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceContextName,
                    },
                    {
                        type = "editbox",
                        name = "Display Name for Experience Gain",
                        tooltip = "Name to post in chat when experience is gained.\nDefault: \"XP\"",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceName = value end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceName,
                    },
                    {
                        type = "checkbox",
                        name = "Show Progress to next level",
                        tooltip = "When enabled, any XP gains will be amended with a display of your progress toward the next level.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceShowProgress end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceShowProgress = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceShowProgress,
                    },
                    {
                        type = "dropdown",
                        name = "Progress Display Method",
                        tooltip = "Choose the method in which Experience progress will be reported.",
                        choices = experienceDisplayOptions,
                        getFunc = function() return experienceDisplayOptions[LUIE.ChatAnnouncements.SV.ExperienceDisplayOptions] end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceDisplayOptions = experienceDisplayOptionsKeys[value] end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.ChatAnnouncements.SV.ExperienceShowProgress and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = experienceDisplayOptions[1],
                    },
                    {
                        type = "checkbox",
                        name = "Show Color Experience Progress",
                        tooltip = "Enables color change for reported experience based off level of completion toward the next level.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceProgressColor end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceProgressColor = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.ChatAnnouncements.SV.ExperienceShowProgress and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceProgressColor,
                    },
                    {
                        type = "checkbox",
                        name = "Show [x.xx] decimal format",
                        tooltip = "When using progress display method 2 or 3, this will display the XP percentage as x.xx% rather than x%.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceShowDecimal end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceShowDecimal = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.ChatAnnouncements.SV.ExperienceShowProgress and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceShowDecimal,
                    },
                    {
                        type = "checkbox",
                        name = "Show [Progress] label",
                        tooltip = "Displays [Progress] label before reporting XP progress.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceShowPBrackets end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceShowPBrackets = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.ChatAnnouncements.SV.ExperienceShowProgress and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceShowPBrackets,
                    },
                    {
                        type = "editbox",
                        name = "Display name for [Progress] label",
                        tooltip = "Modifier the spacer message displayed between XP amount gained and the progress to the next level.\nDefault: \"[Progress]\"",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceProgressName end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceProgressName = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.ChatAnnouncements.SV.ExperienceShowProgress and LUIE.ChatAnnouncements.SV.ExperienceShowPBrackets and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceProgressName,
                    },
                    {
                        type = "checkbox",
                        name = "Show (Current Level) label",
                        tooltip = "Displays (Current Level) after reporting XP progress.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceShowLevel end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceShowLevel = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceShowLevel,
                    },
                    {
                        type = "checkbox",
                        name = "Color Level by Context",
                        tooltip = "Colorizes the current level text to match the current level or champion point context",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceColorLevel end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceColorLevel = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceColorLevel,
                    },
                    {
                        type = "checkbox",
                        name = "Hide Experience from Kills",
                        tooltip = "Toggle this option on to only report experience gain in chat from non-combat sources.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceHideCombat end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceHideCombat = value LUIE.ChatAnnouncements.RegisterXPEvents() end,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceHideCombat,
                    },
                    {
                        type = "slider",
                        name = "Throttle Experience gained in combat",
                        tooltip = "Setting this option higher than 0 allows you to throttle XP gain by X seconds.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.ExperienceThrottle end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.ExperienceThrottle = value end,
                        min = 0,
                        max = 5,
                        step = 1,
                        width = "full",
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Experience and LUIE.SV.ChatAnnouncements_Enable) end,
                        default = LUIE.ChatAnnouncements.D.ExperienceThrottle,
                    },
                },
            },
            {
                type = "submenu",
                name = "Achievements Announcements",
                reference = "Chat_Announcements_Options_Achievements_Announcements_Submenu",
                controls = {
                    {
                        type = "checkbox",
                        name = "Enable Achievements Tracking",
                        tooltip = "Enables achievements tracking sub-module. Below you can select categories of achievements to be tracked.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.Achievements end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.Achievements = value LUIE.ChatAnnouncements.RegisterAchievementsEvent() end,
                        width = "full",
                        disabled = function() return not LUIE.SV.ChatAnnouncements_Enable end,
                        default = LUIE.ChatAnnouncements.D.Achievements,
                    },
                    {
                        type = "slider",
                        name = "Achievements Step Size, %",
                        tooltip = "Display achievement update information every #% to completion. Setting this value to 0 means to print achievement information on every update event.",
                        min = 0, max = 25, step = 1,
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementsStep end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementsStep = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementsStep,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = "Show Detailed Achievement Info",
                        tooltip = "Displays each subcategory required for achievement completion and completion of each subcategory.",
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementsDetails end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementsDetails = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementsDetails,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(1),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(1)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory1 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory1 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory1,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(2),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(2)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory2 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory2 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory2,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(3),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(3)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory3 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory3 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory3,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(4),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(4)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory4 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory4 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory4,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(5),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(5)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory5 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory5 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory5,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(6),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(6)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory6 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory6 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory6,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(7),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(7)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory7 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory7 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory7,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(8),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(8)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory8 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory8 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory8,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(9),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(9)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory9 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory9 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory9,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(10),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(10)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory10 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory10 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory10,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(11),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(11)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory11 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory11 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory11,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                    {
                        type = "checkbox",
                        name = GetAchievementCategoryInfo(12),
                        tooltip = strformat("Enables achievements tracking in <<1>> category.", GetAchievementCategoryInfo(12)),
                        getFunc = function() return LUIE.ChatAnnouncements.SV.AchievementCategory12 end,
                        setFunc = function(value) LUIE.ChatAnnouncements.SV.AchievementCategory12 = value end,
                        width = "full",
                        default = LUIE.ChatAnnouncements.D.AchievementCategory12,
                        disabled = function() return not (LUIE.ChatAnnouncements.SV.Achievements and LUIE.SV.ChatAnnouncements_Enable) end,
                    },
                },
            },
        },
    }

    optionsData[#optionsData + 1] = { -- Use system for messages
        type = "checkbox",
        name = "Use LUIE print to chat function",
        tooltip = "Prints messages using the LUIE specific print to chat function, this will prevent messages from being affected by pChat timestamps and from being logged and restored by pChat.",
        getFunc = function() return LUIE.SV.ChatUseSystem end,
        setFunc = function(value) LUIE.SV.ChatUseSystem = value end,
        width = "full",
        warning = "Enable this only if you know what you are doing.",
        default = LUIE.D.ChatUseSystem,
    }
    optionsData[#optionsData + 1] = { -- Timestamp
        type = "checkbox",
        name = "\t\tInclude Timestamp",
        tooltip = "Prepend printed text with current time label.",
        getFunc = function() return LUIE.SV.TimeStamp end,
        setFunc = function(value) LUIE.SV.TimeStamp = value end,
        width = "full",
        disabled = function() return not LUIE.SV.ChatUseSystem end,
        default = LUIE.D.TimeStamp,
    }
    optionsData[#optionsData + 1] = { -- Timestamp Format
        type = "editbox",
        name = "\t\tTimestamp format",
        tooltip = "FORMAT:\nHH: hours (24)\nhh: hours (12)\nH: hour (24, no leading 0)\nh: hour (12, no leading 0)\nA: AM/PM\na: am/pm\nm: minutes\ns: seconds",
        getFunc = function() return LUIE.SV.TimeStampFormat end,
        setFunc = function(value) LUIE.SV.TimeStampFormat = value end,
        width = "full",
        disabled = function() return not (LUIE.SV.ChatUseSystem and LUIE.SV.TimeStamp) end,
        default = LUIE.D.TimeStampFormat,
    }
    optionsData[#optionsData + 1] = { -- Startup message options
        type = "checkbox",
        name = "Disable startup message",
        tooltip = "This setting will disable add-on startup message.",
        getFunc = function() return LUIE.SV.StartupInfo end,
        setFunc = function(value) LUIE.SV.StartupInfo = value end,
        width = "full",
        default = LUIE.D.StartupInfo,
    }
    optionsData[#optionsData + 1] = {
        type = "header",
        name = "LUIE Slash Commands Overview",
        width = "full",
    }
    optionsData[#optionsData + 1] = {
        type = "description",
        text = "\"/home:\" Ports the user to their primary home.\n\"/disband:\" Disbands the current group if you are group leader.\n\"/regroup:\" Saves your current party configuration, disbands the group and reinvites them after 5 seconds. This command does not work in LFG.\n\"/ginvite1,2,3,4,5:\" Invites a player to one of your guilds based on their order in your Guild Menu. Example syntax: \"/ginvite1 @ArtOfShred\"",
    }

    --[[  BEGIN UNIT FRAMES SETTING PANEL ]]--
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable Unit Frames Module",
        getFunc = function() return LUIE.SV.UnitFrames_Enabled end,
        setFunc = function(value) LUIE.SV.UnitFrames_Enabled = value end,
        width = "full",
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        default = LUIE.D.UnitFrames_Enabled,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "description",
        text = "This module allows display of textual attributes information over default UI controls. It also creates custom frames for player and target. Many of the settings can be applied only after reload of UI.",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "button",
        name = "Reload UI",
        tooltip = "This will reload UI",
        func = function() ReloadUI("ingame") end,
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Shorten numbers on all bars",
        tooltip = "Replace large numbers like 12,345 with 12.3k on all bars and labels related to unit frames.",
        getFunc = function() return LUIE.UnitFrames.SV.ShortenNumbers end,
        setFunc = function(value) LUIE.UnitFrames.SV.ShortenNumbers = value end,
        width = "full",
        default = LUIE.UnitFrames.D.ShortenNumbers,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Default Unit Frames",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Default PLAYER Frame",
        choices = LUIE.UnitFrames.GetDefaultFramesOptions('Player'),
        getFunc = function() return LUIE.UnitFrames.GetDefaultFramesSetting('Player') end,
        setFunc = function(value) LUIE.UnitFrames.SetDefaultFramesSetting('Player', value) end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        default = LUIE.UnitFrames.GetDefaultFramesSetting('Player', true),
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Default TARGET Frame",
        choices = LUIE.UnitFrames.GetDefaultFramesOptions('Target'),
        getFunc = function() return LUIE.UnitFrames.GetDefaultFramesSetting('Target') end,
        setFunc = function(value) LUIE.UnitFrames.SetDefaultFramesSetting('Target', value) end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        default = LUIE.UnitFrames.GetDefaultFramesSetting('Target', true),
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Default Small GROUP Frame",
        choices = LUIE.UnitFrames.GetDefaultFramesOptions('Group'),
        getFunc = function() return LUIE.UnitFrames.GetDefaultFramesSetting('Group') end,
        setFunc = function(value) LUIE.UnitFrames.SetDefaultFramesSetting('Group', value) end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        default = LUIE.UnitFrames.GetDefaultFramesSetting('Group', true),
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Reposition default player bars",
        tooltip = "Change position of default unit frames to be stuck in the center.",
        getFunc = function() return LUIE.UnitFrames.SV.RepositionFrames end,
        setFunc = function(value) LUIE.UnitFrames.SV.RepositionFrames = value end,
        width = "full",
        default = LUIE.UnitFrames.D.RepositionFrames,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Format label text",
        tooltip = "Format of the label text over default unit frames.",
        choices = formatOptions,
        getFunc = function() return LUIE.UnitFrames.SV.Format end,
        setFunc = function(var) LUIE.UnitFrames.SV.Format = var end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.Format,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Out-of-Combat bars transparency",
        tooltip = "This will change the value of transparency of default unit frames when player is out of combat. Default UI makes frames disappear completely, this value is 0.",
        min = 0, max = 100, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.DefaultOocTransparency end,
        setFunc = function(value) LUIE.UnitFrames.SetDefaultFramesTransparency(value, nil) end,
        width = "full",
        default = LUIE.UnitFrames.D.DefaultOocTransparency,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "In-Combat bars transparency",
        tooltip = "This will change the value of transparency of default unit frames when player is in combat. Default UI makes frames fully visible, this value is 100.",
        min = 0, max = 100, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.DefaultIncTransparency end,
        setFunc = function(value) LUIE.UnitFrames.SetDefaultFramesTransparency(nil, value) end,
        width = "full",
        default = LUIE.UnitFrames.D.DefaultIncTransparency,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Font",
        tooltip = "Font to display all labels on default frames.",
        choices = FontsList,
        sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.DefaultFontFace end,
        setFunc = function(var) LUIE.UnitFrames.SV.DefaultFontFace = var LUIE.UnitFrames.DefaultFramesApplyFont() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.DefaultFontFace,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Font Size",
        tooltip = "Font Size to be used on all labels on the default unit frames bars.",
        min = 10, max = 30, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.DefaultFontSize end,
        setFunc = function(value) LUIE.UnitFrames.SV.DefaultFontSize = value LUIE.UnitFrames.DefaultFramesApplyFont() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.DefaultFontSize,
    }
     optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Font Style",
        choices = styleOptions,
        sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.DefaultFontStyle end,
        setFunc = function(var) LUIE.UnitFrames.SV.DefaultFontStyle = var LUIE.UnitFrames.DefaultFramesApplyFont() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.DefaultFontStyle,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Colour of text labels",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.DefaultTextColour) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.DefaultTextColour={r,g,b} LUIE.UnitFrames.DefaultFramesApplyColour() end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.DefaultTextColour[1], g=LUIE.UnitFrames.D.DefaultTextColour[2], b=LUIE.UnitFrames.D.DefaultTextColour[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Target class icon",
        tooltip = "Display icon for target player class.",
        getFunc = function() return LUIE.UnitFrames.SV.TargetShowClass end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetShowClass = value end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetShowClass,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Target ignore/friend/guild icon",
        tooltip = "Display icon for target player if this player is ignored, or your friend, or in one of your guilds.",
        getFunc = function() return LUIE.UnitFrames.SV.TargetShowFriend end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetShowFriend = value end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetShowFriend,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Colour target name by reaction",
        tooltip = "Change the colour of targets name label according to unit reaction.",
        getFunc = function() return LUIE.UnitFrames.SV.TargetColourByReaction end,
        setFunc = LUIE.UnitFrames.TargetColourByReaction,
        width = "full",
        default = LUIE.UnitFrames.D.TargetColourByReaction,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Unlock Custom Frames",
        tooltip = "Allow mouse dragging for all unit frames. When frames are unlocked, the target frame is not being hidden and can display outdated information.",
        getFunc = function() return LUIE.UnitFrames.CustomFramesMovingState end,
        setFunc = LUIE.UnitFrames.CustomFramesSetMovingState,
        width = "half",
        default = false,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        resetFunc = LUIE.UnitFrames.CustomFramesResetPosition,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "button",
        name = "Reset position",
        tooltip = "This will reset position of Custom Frames into original position.",
        func = LUIE.UnitFrames.CustomFramesResetPosition,
        width = "half",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Format left label text",
        tooltip = "Format first label for custom attribute bar.",
        choices = formatOptions,
        getFunc = function() return LUIE.UnitFrames.SV.CustomFormatOne end,
        setFunc = function(var) LUIE.UnitFrames.SV.CustomFormatOne = var LUIE.UnitFrames.CustomFramesFormatLabels() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFormatOne,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Format right label text",
        tooltip = "Format second label for custom attribute bar.",
        choices = formatOptions,
        getFunc = function() return LUIE.UnitFrames.SV.CustomFormatTwo end,
        setFunc = function(var) LUIE.UnitFrames.SV.CustomFormatTwo = var LUIE.UnitFrames.CustomFramesFormatLabels() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFormatTwo,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Font",
        tooltip = "Font to display all labels on custom frames.",
        choices = FontsList,
        sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFontFace end,
        setFunc = function(var) LUIE.UnitFrames.SV.CustomFontFace = var LUIE.UnitFrames.CustomFramesApplyFont() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFontFace,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Font Size (labels)",
        tooltip = "Font Size to be used to display unit name, caption, etc: everything not on bars.",
        min = 10, max = 30, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.CustomFontOther end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFontOther = value LUIE.UnitFrames.CustomFramesApplyFont() end,
        width = "half",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFontOther,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Font Size (bars)",
        tooltip = "Font Size to be used on all labels on the bars.",
        min = 10, max = 30, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.CustomFontBars end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFontBars = value LUIE.UnitFrames.CustomFramesApplyFont() end,
        width = "half",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFontBars,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Font Style",
        choices = styleOptions,
        sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFontStyle end,
        setFunc = function(var) LUIE.UnitFrames.SV.CustomFontStyle = var LUIE.UnitFrames.CustomFramesApplyFont() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomFontStyle,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Texture",
        tooltip = "Texture to use on custom frames.",
        choices = StatusbarTexturesList,
        sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.CustomTexture end,
        setFunc = function(var) LUIE.UnitFrames.SV.CustomTexture = var LUIE.UnitFrames.CustomFramesApplyTexture() end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = LUIE.UnitFrames.D.CustomTexture,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display HoT / DoT Animations",
        tooltip = "DISABLED: Currently broken",
        getFunc = function() return LUIE.UnitFrames.SV.CustomEnableRegen end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomEnableRegen = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomEnableRegen,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.UnitFrames.SV.CustomEnableRegen end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Health Bar Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.CustomColourHealth) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.CustomColourHealth={r,g,b} LUIE.UnitFrames.CustomFramesApplyColours() end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.CustomColourHealth[1], g=LUIE.UnitFrames.D.CustomColourHealth[2], b=LUIE.UnitFrames.D.CustomColourHealth[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Shield Bar Colour",
        getFunc = function() return LUIE.UnitFrames.SV.CustomColourShield[1], LUIE.UnitFrames.SV.CustomColourShield[2], LUIE.UnitFrames.SV.CustomColourShield[3]  end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.CustomColourShield={r,g,b} LUIE.UnitFrames.CustomFramesApplyColours() end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.CustomColourShield[1], g=LUIE.UnitFrames.D.CustomColourShield[2], b=LUIE.UnitFrames.D.CustomColourShield[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Magicka Bar Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.CustomColourMagicka) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.CustomColourMagicka={r,g,b} LUIE.UnitFrames.CustomFramesApplyColours() end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.CustomColourMagicka[1], g=LUIE.UnitFrames.D.CustomColourMagicka[2], b=LUIE.UnitFrames.D.CustomColourMagicka[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Stamina Bar Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.CustomColourStamina) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.CustomColourStamina={r,g,b} LUIE.UnitFrames.CustomFramesApplyColours() end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.CustomColourStamina[1], g=LUIE.UnitFrames.D.CustomColourStamina[2], b=LUIE.UnitFrames.D.CustomColourStamina[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Use Separate Shield Bar",
        tooltip = "Enable this option to make a Shield Bar on Player, Target and Small Group custom frames independent and not overlayed with Health Bar. If you are heavy shield user like many sorcerer players, then you may like this option.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomShieldBarSeparate end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomShieldBarSeparate = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomShieldBarSeparate,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Separate Shield Bar Height",
        min = 4, max = 12, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.CustomShieldBarHeight end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomShieldBarHeight = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() LUIE.UnitFrames.CustomFramesApplyLayoutGroup() end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomShieldBarHeight,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomShieldBarSeparate ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Overlay Full Height Shield Bar",
        tooltip = "(When Shield bar is NOT separate) Use full-sized shield bar on top of health bar for Player, Target and Small Group custom frames instead of default half-height overlay bar.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomShieldBarFull end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomShieldBarFull = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomShieldBarFull,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and not LUIE.UnitFrames.SV.CustomShieldBarSeparate ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Use Smooth Bar Transition",
        tooltip = "Use smooth transition on all bars when value get changed. Disabling this option could improve performance a little.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomSmoothBar end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomSmoothBar = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomSmoothBar,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames (Player, Target)",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable This Addon PLAYER frame",
        tooltip = "Create custom Player unit frames.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFramesPlayer end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFramesPlayer = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomFramesPlayer,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable This Addon TARGET frame",
        tooltip = "Create custom Target unit frames.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFramesTarget end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFramesTarget = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomFramesTarget,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Player Bars Width",
        min = 200, max = 500, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.PlayerBarWidth end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerBarWidth = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerBarWidth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Player Health Bar Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.PlayerBarHeightHealth end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerBarHeightHealth = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerBarHeightHealth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Player Magicka Bar Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.PlayerBarHeightMagicka end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerBarHeightMagicka = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerBarHeightMagicka,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Player Stamina Bar Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.PlayerBarHeightStamina end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerBarHeightStamina = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerBarHeightStamina,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Hide Player Magicka Bar Label",
        tooltip = "Hide just the label on the Player Magicka Bar",
        getFunc = function() return LUIE.UnitFrames.SV.HideLabelMagicka end,
        setFunc = function(value) LUIE.UnitFrames.SV.HideLabelMagicka = value LUIE.UnitFrames.SV.HideBarMagicka = false end,
        width = "full",
        default = LUIE.UnitFrames.D.HideLabelMagicka,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Hide Player Magicka Bar",
        tooltip = "Completely hide the Player Magicka Bar",
        getFunc = function() return LUIE.UnitFrames.SV.HideBarMagicka end,
        setFunc = function(value) LUIE.UnitFrames.SV.HideBarMagicka = value end,
        width = "full",
        default = LUIE.UnitFrames.D.HideBarMagicka,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer and LUIE.UnitFrames.SV.HideLabelMagicka ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Hide Player Stamina Bar Label",
        tooltip = "Completely hide the Player Stamina Bar",
        getFunc = function() return LUIE.UnitFrames.SV.HideLabelStamina end,
        setFunc = function(value) LUIE.UnitFrames.SV.HideLabelStamina = value LUIE.UnitFrames.SV.HideBarStamina = false end,
        width = "full",
        default = LUIE.UnitFrames.D.HideLabelStamina,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Hide Player Stamina Bar",
        tooltip = "Hide just the label on the Player Stamina Bar",
        getFunc = function() return LUIE.UnitFrames.SV.HideBarStamina end,
        setFunc = function(value) LUIE.UnitFrames.SV.HideBarStamina = value end,
        width = "full",
        default = LUIE.UnitFrames.D.HideBarStamina,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer and LUIE.UnitFrames.SV.HideLabelStamina ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Spacing between Player Bars",
        min = -1, max = 4, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.PlayerBarSpacing end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerBarSpacing = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerBarSpacing,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Your name on Player Frame",
        tooltip = "Display your character name and level on the player frame.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableYourname end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableYourname = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableYourname,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Mount/Siege/Werewolf bar",
        tooltip = "Display alternative meaning bar to track mount stamina, siege weapon health, werewolf time left.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableAltbarMSW end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableAltbarMSW = value LUIE.UnitFrames.CustomFramesSetupAlternative() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableAltbarMSW,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display XP/ChampionXP bar",
        tooltip = "Display alternative meaning bar to track player experience.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableAltbarXP end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableAltbarXP = value LUIE.UnitFrames.CustomFramesSetupAlternative() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableAltbarXP,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "ChampionXP bar Point-Type Colour",
        tooltip = "Set colour of ChampionXP bar (Experience bar for vr14 players) to be dependent on type of Champion Point being earned.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerChampionColour end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerChampionColour = value LUIE.UnitFrames.OnChampionPointGained() end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerChampionColour,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer and LUIE.UnitFrames.SV.PlayerEnableAltbarXP ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Armor stat change",
        tooltip = "Display additional icon on unit health bar when unit has its armor affected. Also displays cracked texture over health bar when armor is decreased.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableArmor end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableArmor = value end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableArmor,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }
    --[[optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Weapon Power stat change",
        tooltip = "Display additional icon on unit health bar when unit has its weapon power affected.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableWeaponPower end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableWeaponPower = value end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableWeaponPower,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }]]--
    --[[optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Spell Power stat change",
        tooltip = "Display additional icon on unit health bar when unit has its spell power affected.",
        getFunc = function() return LUIE.UnitFrames.SV.PlayerEnableSpellPower end,
        setFunc = function(value) LUIE.UnitFrames.SV.PlayerEnableSpellPower = value end,
        width = "full",
        default = LUIE.UnitFrames.D.PlayerEnableSpellPower,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }]]--
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Out-of-Combat frame opacity",
        tooltip = "Opacity of Player custom frame when not engaged in combat.",
        min = 0, max = 100, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.CustomOocAlpha end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomOocAlpha = value LUIE.UnitFrames.CustomFramesApplyInCombat() end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomOocAlpha,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "In-Combat frame opacity",
        tooltip = "Opacity of Player custom frame when engaged in combat.",
        min = 0, max = 100, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.CustomIncAlpha end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomIncAlpha = value LUIE.UnitFrames.CustomFramesApplyInCombat() end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomIncAlpha,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Treat Missing Power as In-Combat",
        -- tooltip = "",
        getFunc = function() return LUIE.UnitFrames.SV.CustomOocAlphaPower end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomOocAlphaPower = value LUIE.UnitFrames.CustomFramesApplyInCombat() end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomOocAlphaPower,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and ( LUIE.UnitFrames.SV.CustomFramesPlayer or LUIE.UnitFrames.SV.CustomFramesTarget ) ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Apply same opacity to Target frame",
        tooltip = "Apply same transparency setting to Target frame as well. If this option is disabled, the Targets frame will have always 'In-Combat' values of opacity.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomOocAlphaTarget end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomOocAlphaTarget = value LUIE.UnitFrames.CustomFramesApplyInCombat() end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomOocAlphaTarget,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Target Bars Width",
        min = 200, max = 500, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.TargetBarWidth end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetBarWidth = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetBarWidth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Target Bar Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.TargetBarHeight end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetBarHeight = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetBarHeight,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Target class label",
        tooltip = "Display text label with target class name on target frame together with class icon.",
        getFunc = function() return LUIE.UnitFrames.SV.TargetEnableClass end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetEnableClass = value end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetEnableClass,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Execute Health % Threshold",
        tooltip = "Determines the threshold of HP to color the target label text red, as well as display the skull execute texture if enabled.",
        min = 0, max = 50, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.ExecutePercentage end,
        setFunc = function(value) LUIE.UnitFrames.SV.ExecutePercentage = value end,
        width = "full",
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        default = LUIE.UnitFrames.D.ExecutePercentage,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesPlayer ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Display Skull Execute Texture",
        tooltip = "Display Skull texture next to custom target frame for low-health target that should be executed.",
        getFunc = function() return LUIE.UnitFrames.SV.TargetEnableSkull end,
        setFunc = function(value) LUIE.UnitFrames.SV.TargetEnableSkull = value end,
        width = "full",
        default = LUIE.UnitFrames.D.TargetEnableSkull,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames (Group)",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable This Addon GROUP frames",
        tooltip = "Create custom GROUP unit frames.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFramesGroup end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFramesGroup = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomFramesGroup,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable Default GROUP frames",
        tooltip = "This will show default UI small group unit frames when group size is less or equal then 4.",
        getFunc = function() return not ( LUIE.UnitFrames.SV.GroupDisableDefault and (LUIE.UnitFrames.SV.CustomFramesGroup or LUIE.UnitFrames.SV.CustomFramesRaid) ) end,
        setFunc = function(value) LUIE.UnitFrames.SV.GroupDisableDefault = not value LUIE.UnitFrames.CustomFramesGroupUpdate() end,
        width = "full",
        default = not LUIE.UnitFrames.D.GroupDisableDefault,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and (LUIE.UnitFrames.SV.CustomFramesGroup or LUIE.UnitFrames.SV.CustomFramesRaid) ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Include Player in Group Frame",
        -- tooltip = "",
        getFunc = function() return not LUIE.UnitFrames.SV.GroupExcludePlayer end,
        setFunc = function(value) LUIE.UnitFrames.SV.GroupExcludePlayer = (not value) LUIE.UnitFrames.CustomFramesGroupUpdate() end,
        width = "full",
        default = not LUIE.UnitFrames.D.GroupExcludePlayer,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesGroup ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Group Bars Width",
        min = 100, max = 400, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.GroupBarWidth end,
        setFunc = function(value) LUIE.UnitFrames.SV.GroupBarWidth = value LUIE.UnitFrames.CustomFramesApplyLayoutGroup() end,
        width = "full",
        default = LUIE.UnitFrames.D.GroupBarWidth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesGroup ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Group Bars Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.GroupBarHeight end,
        setFunc = function(value) LUIE.UnitFrames.SV.GroupBarHeight = value LUIE.UnitFrames.CustomFramesApplyLayoutGroup() end,
        width = "full",
        default = LUIE.UnitFrames.D.GroupBarHeight,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesGroup ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Spacing between Group Bars",
        min = 20, max = 80, step = 2,
        getFunc = function() return LUIE.UnitFrames.SV.GroupBarSpacing end,
        setFunc = function(value) LUIE.UnitFrames.SV.GroupBarSpacing = value LUIE.UnitFrames.CustomFramesApplyLayoutGroup() end,
        width = "full",
        default = LUIE.UnitFrames.D.GroupBarSpacing,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesGroup ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames (Raid)",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable This Addon RAID frames",
        tooltip = "Create custom RAID unit frames. If custom GROUP frames are used, then this raid frame will also be used for small groups.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFramesRaid end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFramesRaid = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomFramesRaid,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable Default RAID frames",
        tooltip = "This will show default UI RAID unit frames when group size is larger then 4.",
        getFunc = function() return not ( LUIE.UnitFrames.SV.RaidDisableDefault and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
        setFunc = function(value) LUIE.UnitFrames.SV.RaidDisableDefault = not value LUIE.UnitFrames.CustomFramesGroupUpdate() end,
        width = "full",
        default = not LUIE.UnitFrames.D.RaidDisableDefault,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Raid Bars Width",
        min = 100, max = 500, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.RaidBarWidth end,
        setFunc = function(value) LUIE.UnitFrames.SV.RaidBarWidth = value LUIE.UnitFrames.CustomFramesApplyLayoutRaid() end,
        width = "full",
        default = LUIE.UnitFrames.D.RaidBarWidth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "Raid Bars Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.RaidBarHeight end,
        setFunc = function(value) LUIE.UnitFrames.SV.RaidBarHeight = value LUIE.UnitFrames.CustomFramesApplyLayoutRaid() end,
        width = "full",
        default = LUIE.UnitFrames.D.RaidBarHeight,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Raid Frame Layout",
        tooltip = "Select layout of raid frame in format 'columns*rows'.",
        choices = { '1 x 24', '2 x 12', '3 x 8', '4 x 6', '6 x 4' },
        -- sort = "name-up",
        getFunc = function() return LUIE.UnitFrames.SV.RaidLayout end,
        setFunc = function(var) LUIE.UnitFrames.SV.RaidLayout = var LUIE.UnitFrames.CustomFramesApplyLayoutRaid() end,
        width = "full",
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
        default = LUIE.UnitFrames.D.RaidLayout,
    }
    --[[
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Sort Raid Frame",
        tooltip = "Perform alphabetic sort of members in raid-size group. This is a default UI behaviour. If for any reason you prefer to have raid members sorted according to internal game numbering, you can switch off this option.",
        getFunc = function() return LUIE.UnitFrames.SV.RaidSort end,
        setFunc = function(value) LUIE.UnitFrames.SV.RaidSort = value LUIE.UnitFrames.CustomFramesGroupUpdate() end,
        width = "full",
        default = LUIE.UnitFrames.D.RaidSort,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
    } ]]--
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Add Spacer for every 4 members",
        tooltip = "Add a small spacer between raid members frames to visualize default group splitting.",
        getFunc = function() return LUIE.UnitFrames.SV.RaidSpacers end,
        setFunc = function(value) LUIE.UnitFrames.SV.RaidSpacers = value LUIE.UnitFrames.CustomFramesApplyLayoutRaid() end,
        width = "full",
        default = LUIE.UnitFrames.D.RaidSpacers,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.CustomFramesRaid ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames (Boss)",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable This Addon BOSS frames",
        tooltip = "Create custom BOSS unit frames. This will track health of up to 6 bosses in dungeons encounters.",
        getFunc = function() return LUIE.UnitFrames.SV.CustomFramesBosses end,
        setFunc = function(value) LUIE.UnitFrames.SV.CustomFramesBosses = value end,
        width = "full",
        default = LUIE.UnitFrames.D.CustomFramesBosses,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Custom Unit Frames (PvP Target Frame)",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Enable additional PvP Target frame",
        tooltip = "Create additional custom target unit frames. This will track health of hostile pvp players only. It also by default has larger size, less information and positioned on screen center.",
        getFunc = function() return LUIE.UnitFrames.SV.AvaCustFramesTarget end,
        setFunc = function(value) LUIE.UnitFrames.SV.AvaCustFramesTarget = value end,
        width = "full",
        default = LUIE.UnitFrames.D.AvaCustFramesTarget,
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "PvP Target Bars Width",
        min = 300, max = 700, step = 5,
        getFunc = function() return LUIE.UnitFrames.SV.AvaTargetBarWidth end,
        setFunc = function(value) LUIE.UnitFrames.SV.AvaTargetBarWidth = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.AvaTargetBarWidth,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.AvaCustFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "slider",
        name = "PvP Target Bar Height",
        min = 20, max = 70, step = 1,
        getFunc = function() return LUIE.UnitFrames.SV.AvaTargetBarHeight end,
        setFunc = function(value) LUIE.UnitFrames.SV.AvaTargetBarHeight = value LUIE.UnitFrames.CustomFramesApplyLayoutPlayer() end,
        width = "full",
        default = LUIE.UnitFrames.D.AvaTargetBarHeight,
        disabled = function() return not ( LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.AvaCustFramesTarget ) end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "header",
        name = "Common options",
        width = "full",
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Name Display Method",
        warning = GetString(SI_LUIE_LAM_RELOADUI_WARNING),
        tooltip = "Determines the method used to display other player names on unit frames. This setting does not effect the player frame.\nDefault: Character Name",
        choices = nameDisplayOptions,
        getFunc = function() return nameDisplayOptions[LUIE.UnitFrames.SV.DisplayOptions] end,
        setFunc = function(value) LUIE.UnitFrames.SV.DisplayOptions = nameDisplayOptionsKeys[value] end,
        width = "full",
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
        default = nameDisplayOptions[2]
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Default Caption Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.Target_FontColour) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.Target_FontColour={r,g,b} end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.Target_FontColour[1], g=LUIE.UnitFrames.D.Target_FontColour[2], b=LUIE.UnitFrames.D.Target_FontColour[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Friendly NPC Font Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.Target_FontColour_FriendlyNPC) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.Target_FontColour_FriendlyNPC={r,g,b} end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.Target_FontColour_FriendlyNPC[1], g=LUIE.UnitFrames.D.Target_FontColour_FriendlyNPC[2], b=LUIE.UnitFrames.D.Target_FontColour_FriendlyNPC[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Friendly Player Font Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.Target_FontColour_FriendlyPlayer) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.Target_FontColour_FriendlyPlayer={r,g,b} end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.Target_FontColour_FriendlyPlayer[1], g=LUIE.UnitFrames.D.Target_FontColour_FriendlyPlayer[2], b=LUIE.UnitFrames.D.Target_FontColour_FriendlyPlayer[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Hostile Font Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.Target_FontColour_Hostile) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.Target_FontColour_Hostile={r,g,b} end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.Target_FontColour_Hostile[1], g=LUIE.UnitFrames.D.Target_FontColour_Hostile[2], b=LUIE.UnitFrames.D.Target_FontColour_Hostile[3] },
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "checkbox",
        name = "Apply same settings to reticle",
        tooltip = "Change the colour of reticle (cross-hair) according to unit reaction.",
        getFunc = function() return LUIE.UnitFrames.SV.ReticleColourByReaction end,
        setFunc = LUIE.UnitFrames.ReticleColourByReaction,
        width = "full",
        default = LUIE.UnitFrames.D.ReticleColourByReaction,
        disabled = function() return not LUIE.SV.UnitFrames_Enabled end,
    }
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "colorpicker",
        name = "Interactible Reticle Colour",
        getFunc = function() return unpack(LUIE.UnitFrames.SV.ReticleColour_Interact) end,
        setFunc = function(r,g,b,a) LUIE.UnitFrames.SV.ReticleColour_Interact={r,g,b} end,
        width = "full",
        default = { r=LUIE.UnitFrames.D.ReticleColour_Interact[1], g=LUIE.UnitFrames.D.ReticleColour_Interact[2], b=LUIE.UnitFrames.D.ReticleColour_Interact[3] },
        disabled = function() return not (LUIE.SV.UnitFrames_Enabled and LUIE.UnitFrames.SV.ReticleColourByReaction) end,
    }
    --[[
    optionsDataUnitFrames[#optionsDataUnitFrames + 1] = {
        type = "dropdown",
        name = "Font Style",
        choices = styleOptions,
        sort = "name-up",
        getFunc = function() return LUIE.SpellCastBuffs.SV.BuffFontStyle end,
        setFunc = function(var) LUIE.SpellCastBuffs.SV.BuffFontStyle = var LUIE.SpellCastBuffs.ApplyFont() end,
        width = "full",
        default = LUIE.SpellCastBuffs.D.BuffFontStyle,
        disabled = function() return not ( LUIE.SV.SpellCastBuff_Enable and LUIE.SpellCastBuffs.SV.RemainingText ) end,
    }
    ]]--

    LAM2:RegisterAddonPanel('LUIEAddonOptions', panelData)
    LAM2:RegisterOptionControls('LUIEAddonOptions', optionsData)

    LAM2:RegisterAddonPanel('LUIEUnitFramesOptions', panelDataUnitFrames)
    LAM2:RegisterOptionControls('LUIEUnitFramesOptions', optionsDataUnitFrames)
end
